[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Research Introduction: AI vs. Non-AI Careers",
    "section": "",
    "text": "AI is generating jobs and causing some effects in fields like healthcare, finance, and technology. In healthcare, they’re using AI to simplify diagnoses, discover new drugs, and tailor medicine to individuals, which is creating more demand for those familiar with AI in medicine (Medium, 2024). In finance, they’re using AI for fraud detection, risk assessment, and high-frequency trading, so there’s greater demand for data analysts and machine learning specialists too (Globalization Partners, 2024).\nAlthough AI has created many new positions in some fields, it’s also making individuals to lose their jobs in some industries based on the same old repetitive and manual work. These days retail and manufacturing businesses are losing traditional jobs since robots and automation, some of which uses AI, are doing the human work (Innopharma Education, 2024). And what about customer support roles? Well, they’re at risk too since AI chatbots and virtual assistants are responding to more and more customer inquiries. They are creating less need for human representatives (Nexford, 2024).\nAI jobs also get paid much more than average. If we look at fields like data science, AI engineering, and cloud computing, those professionals make a lot more than professionals like accounting, mechanical engineering, or retail. In addition, AI job postings are still increasing, especially in tech hubs like Silicon Valley, Boston, and Austin, where companies are especially willing to recruit AI talent (Globalization Partners, 2024).\nCompanies are indeed searching for AI professionals in areas like machine learning, cybersecurity, and automation. However, since there is a shortage of qualified AI professionals, those who have AI skills can command relatively decent salaries and perks. New industries like fintech and AI-driven healthcare are booming with job growth, which is a positive development for anyone who has AI-related skills (Medium, 2024)."
  },
  {
    "objectID": "1.html",
    "href": "1.html",
    "title": "Salary Distribution (Box Plot & Histogram)",
    "section": "",
    "text": "import pandas as pd\ndf = pd.read_csv(\"lightcast_job_postings.csv\")\nprint(df.columns.tolist())\n\n['ID', 'LAST_UPDATED_DATE', 'LAST_UPDATED_TIMESTAMP', 'DUPLICATES', 'POSTED', 'EXPIRED', 'DURATION', 'SOURCE_TYPES', 'SOURCES', 'URL', 'ACTIVE_URLS', 'ACTIVE_SOURCES_INFO', 'TITLE_RAW', 'BODY', 'MODELED_EXPIRED', 'MODELED_DURATION', 'COMPANY', 'COMPANY_NAME', 'COMPANY_RAW', 'COMPANY_IS_STAFFING', 'EDUCATION_LEVELS', 'EDUCATION_LEVELS_NAME', 'MIN_EDULEVELS', 'MIN_EDULEVELS_NAME', 'MAX_EDULEVELS', 'MAX_EDULEVELS_NAME', 'EMPLOYMENT_TYPE', 'EMPLOYMENT_TYPE_NAME', 'MIN_YEARS_EXPERIENCE', 'MAX_YEARS_EXPERIENCE', 'IS_INTERNSHIP', 'SALARY', 'REMOTE_TYPE', 'REMOTE_TYPE_NAME', 'ORIGINAL_PAY_PERIOD', 'SALARY_TO', 'SALARY_FROM', 'LOCATION', 'CITY', 'CITY_NAME', 'COUNTY', 'COUNTY_NAME', 'MSA', 'MSA_NAME', 'STATE', 'STATE_NAME', 'COUNTY_OUTGOING', 'COUNTY_NAME_OUTGOING', 'COUNTY_INCOMING', 'COUNTY_NAME_INCOMING', 'MSA_OUTGOING', 'MSA_NAME_OUTGOING', 'MSA_INCOMING', 'MSA_NAME_INCOMING', 'NAICS2', 'NAICS2_NAME', 'NAICS3', 'NAICS3_NAME', 'NAICS4', 'NAICS4_NAME', 'NAICS5', 'NAICS5_NAME', 'NAICS6', 'NAICS6_NAME', 'TITLE', 'TITLE_NAME', 'TITLE_CLEAN', 'SKILLS', 'SKILLS_NAME', 'SPECIALIZED_SKILLS', 'SPECIALIZED_SKILLS_NAME', 'CERTIFICATIONS', 'CERTIFICATIONS_NAME', 'COMMON_SKILLS', 'COMMON_SKILLS_NAME', 'SOFTWARE_SKILLS', 'SOFTWARE_SKILLS_NAME', 'ONET', 'ONET_NAME', 'ONET_2019', 'ONET_2019_NAME', 'CIP6', 'CIP6_NAME', 'CIP4', 'CIP4_NAME', 'CIP2', 'CIP2_NAME', 'SOC_2021_2', 'SOC_2021_2_NAME', 'SOC_2021_3', 'SOC_2021_3_NAME', 'SOC_2021_4', 'SOC_2021_4_NAME', 'SOC_2021_5', 'SOC_2021_5_NAME', 'LOT_CAREER_AREA', 'LOT_CAREER_AREA_NAME', 'LOT_OCCUPATION', 'LOT_OCCUPATION_NAME', 'LOT_SPECIALIZED_OCCUPATION', 'LOT_SPECIALIZED_OCCUPATION_NAME', 'LOT_OCCUPATION_GROUP', 'LOT_OCCUPATION_GROUP_NAME', 'LOT_V6_SPECIALIZED_OCCUPATION', 'LOT_V6_SPECIALIZED_OCCUPATION_NAME', 'LOT_V6_OCCUPATION', 'LOT_V6_OCCUPATION_NAME', 'LOT_V6_OCCUPATION_GROUP', 'LOT_V6_OCCUPATION_GROUP_NAME', 'LOT_V6_CAREER_AREA', 'LOT_V6_CAREER_AREA_NAME', 'SOC_2', 'SOC_2_NAME', 'SOC_3', 'SOC_3_NAME', 'SOC_4', 'SOC_4_NAME', 'SOC_5', 'SOC_5_NAME', 'LIGHTCAST_SECTORS', 'LIGHTCAST_SECTORS_NAME', 'NAICS_2022_2', 'NAICS_2022_2_NAME', 'NAICS_2022_3', 'NAICS_2022_3_NAME', 'NAICS_2022_4', 'NAICS_2022_4_NAME', 'NAICS_2022_5', 'NAICS_2022_5_NAME', 'NAICS_2022_6', 'NAICS_2022_6_NAME']\n\n\n\nimport pandas as pd \ndf = pd.read_csv(\"lightcast_job_postings.csv\")\ndf.info()\ndf.head()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 72476 entries, 0 to 72475\nColumns: 131 entries, ID to NAICS_2022_6_NAME\ndtypes: bool(2), float64(11), int64(27), object(91)\nmemory usage: 71.5+ MB\n\n\n\n\n\n\n\n\n\n\nID\nLAST_UPDATED_DATE\nLAST_UPDATED_TIMESTAMP\nDUPLICATES\nPOSTED\nEXPIRED\nDURATION\nSOURCE_TYPES\nSOURCES\nURL\n...\nNAICS_2022_2\nNAICS_2022_2_NAME\nNAICS_2022_3\nNAICS_2022_3_NAME\nNAICS_2022_4\nNAICS_2022_4_NAME\nNAICS_2022_5\nNAICS_2022_5_NAME\nNAICS_2022_6\nNAICS_2022_6_NAME\n\n\n\n\n0\n1f57d95acf4dc67ed2819eb12f049f6a5c11782c\n2024-09-06\n2024-09-06 20:32:57.352 Z\n0\n2024-06-02\n2024-06-08\n6.0\n[\\n \"Company\"\\n]\n[\\n \"brassring.com\"\\n]\n[\\n \"https://sjobs.brassring.com/TGnewUI/Sear...\n...\n44\nRetail Trade\n441\nMotor Vehicle and Parts Dealers\n4413\nAutomotive Parts, Accessories, and Tire Retailers\n44133\nAutomotive Parts and Accessories Retailers\n441330\nAutomotive Parts and Accessories Retailers\n\n\n1\n0cb072af26757b6c4ea9464472a50a443af681ac\n2024-08-02\n2024-08-02 17:08:58.838 Z\n0\n2024-06-02\n2024-08-01\nNaN\n[\\n \"Job Board\"\\n]\n[\\n \"maine.gov\"\\n]\n[\\n \"https://joblink.maine.gov/jobs/1085740\"\\n]\n...\n56\nAdministrative and Support and Waste Managemen...\n561\nAdministrative and Support Services\n5613\nEmployment Services\n56132\nTemporary Help Services\n561320\nTemporary Help Services\n\n\n2\n85318b12b3331fa490d32ad014379df01855c557\n2024-09-06\n2024-09-06 20:32:57.352 Z\n1\n2024-06-02\n2024-07-07\n35.0\n[\\n \"Job Board\"\\n]\n[\\n \"dejobs.org\"\\n]\n[\\n \"https://dejobs.org/dallas-tx/data-analys...\n...\n52\nFinance and Insurance\n524\nInsurance Carriers and Related Activities\n5242\nAgencies, Brokerages, and Other Insurance Rela...\n52429\nOther Insurance Related Activities\n524291\nClaims Adjusting\n\n\n3\n1b5c3941e54a1889ef4f8ae55b401a550708a310\n2024-09-06\n2024-09-06 20:32:57.352 Z\n1\n2024-06-02\n2024-07-20\n48.0\n[\\n \"Job Board\"\\n]\n[\\n \"disabledperson.com\",\\n \"dejobs.org\"\\n]\n[\\n \"https://www.disabledperson.com/jobs/5948...\n...\n52\nFinance and Insurance\n522\nCredit Intermediation and Related Activities\n5221\nDepository Credit Intermediation\n52211\nCommercial Banking\n522110\nCommercial Banking\n\n\n4\ncb5ca25f02bdf25c13edfede7931508bfd9e858f\n2024-06-19\n2024-06-19 07:00:00.000 Z\n0\n2024-06-02\n2024-06-17\n15.0\n[\\n \"FreeJobBoard\"\\n]\n[\\n \"craigslist.org\"\\n]\n[\\n \"https://modesto.craigslist.org/sls/77475...\n...\n99\nUnclassified Industry\n999\nUnclassified Industry\n9999\nUnclassified Industry\n99999\nUnclassified Industry\n999999\nUnclassified Industry\n\n\n\n\n5 rows × 131 columns\n\n\n\n\n\nimport plotly.io as pio\npio.templates.default = 'plotly_white'\n\n\nSalary Distribution (Box Plot & Histogram)\n\nimport plotly.express as px\n\nfig_box = px.box(df, y='SALARY', points='all', title='Salary Distribution Box Plot')\nfig_box.show()\n\nfig_hist = px.histogram(df, x='SALARY', nbins=50, title='Salary Distribution Histogram')\nfig_hist.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\nTop Industries with Most Job Postings\n\ntop_industries = df['NAICS2_NAME'].value_counts().nlargest(20)\n\nfig_ind = px.bar(top_industries, \n                 x=top_industries.index, y=top_industries.values,\n                 labels={'x': 'NAICS2_NAME', 'y': 'Number of Postings'},\n                 title='Top 20 Industries with Most Job Postings')\nfig_ind.update_layout(xaxis_tickangle=-45)\nfig_ind.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\nRemote vs On-site Job Distribution\n\ndf['REMOTE_TYPE_NAME'] = df['REMOTE_TYPE_NAME'].fillna('On-Site')\n\nfig_remote = px.pie(df, names='REMOTE_TYPE_NAME', title='Remote vs On-site Job Distribution')\nfig_remote.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nselected_columns = df[['TITLE', 'SALARY', 'SALARY_FROM', 'SALARY_TO', 'SKILLS']]\nprint(selected_columns.head())\nselected_columns.to_csv('Extracted_data.csv', index=False)\n\n                TITLE   SALARY  SALARY_FROM  SALARY_TO  \\\n0  ET29C073C03D1F86B4      NaN          NaN        NaN   \n1  ET21DDA63780A7DC09      NaN          NaN        NaN   \n2  ET3037E0C947A02404      NaN          NaN        NaN   \n3  ET2114E0404BA30075      NaN          NaN        NaN   \n4  ET0000000000000000  92500.0      35000.0   150000.0   \n\n                                              SKILLS  \n0  [\\n  \"KS126DB6T061MHD7RTGQ\",\\n  \"KS126706DPFD3...  \n1  [\\n  \"KS122626T550SLQ7QZ1C\",\\n  \"KS123YJ6KVWC9...  \n2  [\\n  \"KS1218W78FGVPVP2KXPX\",\\n  \"ESF3939CE1F80...  \n3  [\\n  \"KS123QX62QYTC4JF38H8\",\\n  \"KS7G6NP6R6L1H...  \n4                                                 []  \n\n\n\nmissing_values = df.isnull().sum()\n\nmissing_percentage = (missing_values / len(df)) * 100\n\nmissing_data = pd.DataFrame({\"Missing Values\": missing_values, \"Percentage\": missing_percentage})\nmissing_data = missing_data[missing_data[\"Missing Values\"] &gt; 0]\n\nmissing_data = missing_data.sort_values(by=\"Percentage\", ascending=False)\n\n\nsalary_median = df[\"SALARY\"].median()\n\ndf[\"SALARY\"].fillna(salary_median, inplace=True)\n\nprint(\"Missing values in SALARY after filling:\", df[\"SALARY\"].isnull().sum())\n\ndate_columns = [\"LAST_UPDATED_DATE\", \"LAST_UPDATED_TIMESTAMP\", \"POSTED\", \"EXPIRED\"]\n\nfor col in date_columns:\n    if col in df.columns:  \n        df[col] = pd.to_datetime(df[col], errors=\"coerce\", utc=True) \n\nprint(df[[\"LAST_UPDATED_DATE\", \"LAST_UPDATED_TIMESTAMP\", \"POSTED\", \"EXPIRED\"]].head(10))\n\nMissing values in SALARY after filling: 0\n          LAST_UPDATED_DATE           LAST_UPDATED_TIMESTAMP  \\\n0 2024-09-06 00:00:00+00:00 2024-09-06 20:32:57.352000+00:00   \n1 2024-08-02 00:00:00+00:00 2024-08-02 17:08:58.838000+00:00   \n2 2024-09-06 00:00:00+00:00 2024-09-06 20:32:57.352000+00:00   \n3 2024-09-06 00:00:00+00:00 2024-09-06 20:32:57.352000+00:00   \n4 2024-06-19 00:00:00+00:00        2024-06-19 07:00:00+00:00   \n5 2024-09-06 00:00:00+00:00 2024-09-06 20:32:57.352000+00:00   \n6 2024-08-02 00:00:00+00:00 2024-08-02 17:08:58.838000+00:00   \n7 2024-09-06 00:00:00+00:00 2024-09-06 20:32:57.352000+00:00   \n8 2024-06-21 00:00:00+00:00        2024-06-21 07:00:00+00:00   \n9 2024-10-09 00:00:00+00:00 2024-10-09 18:07:44.758000+00:00   \n\n                     POSTED                   EXPIRED  \n0 2024-06-02 00:00:00+00:00 2024-06-08 00:00:00+00:00  \n1 2024-06-02 00:00:00+00:00 2024-08-01 00:00:00+00:00  \n2 2024-06-02 00:00:00+00:00 2024-07-07 00:00:00+00:00  \n3 2024-06-02 00:00:00+00:00 2024-07-20 00:00:00+00:00  \n4 2024-06-02 00:00:00+00:00 2024-06-17 00:00:00+00:00  \n5 2024-06-02 00:00:00+00:00 2024-06-12 00:00:00+00:00  \n6 2024-06-02 00:00:00+00:00 2024-08-01 00:00:00+00:00  \n7 2024-06-02 00:00:00+00:00 2024-07-07 00:00:00+00:00  \n8 2024-06-02 00:00:00+00:00 2024-06-20 00:00:00+00:00  \n9 2024-06-02 00:00:00+00:00 2024-08-01 00:00:00+00:00  \n\n\nC:\\Users\\ch625\\AppData\\Local\\Temp\\ipykernel_7124\\1041197890.py:13: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Generate sample data (simulating original dataset)\ndata = {\n    \"STATE_NAME\": [\"California\", \"Texas\", \"New York\", \"Florida\", \"Illinois\"],\n    \"JOB_POSTINGS\": [12000, 9500, 8700, 7500, 6700],\n    \"REMOTE_JOBS\": [4500, 3800, 3200, 2900, 2500],\n    \"SALARY_FROM\": [60000, 55000, 58000, 53000, 52000],\n    \"SALARY_TO\": [120000, 110000, 115000, 105000, 100000],\n    \"INDUSTRY\": [\"Tech\", \"Finance\", \"Healthcare\", \"Retail\", \"Manufacturing\"]\n}\n\ndf = pd.DataFrame(data)\n\n# Set Seaborn theme\nsns.set_theme(style=\"whitegrid\")\n\n# 1. Job Posting Trends (Bar Chart)\nplt.figure(figsize=(10, 6))\nsns.barplot(x=\"STATE_NAME\", y=\"JOB_POSTINGS\", hue=\"INDUSTRY\", data=df)\nplt.title(\"Job Posting Trends by State\")\nplt.xlabel(\"State\")\nplt.ylabel(\"Number of Job Postings\")\nplt.xticks(rotation=45)\nplt.legend(title=\"Industry\")\nplt.show()\n\n\n\n\n\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Read dataset from local file\nfile_path = \"lightcast_job_postings.csv\"  # 确保文件在当前工作目录，或填写完整路径\ndf = pd.read_csv(file_path)\n\n# Inspect the first few rows to verify the data structure\nprint(df.head())\n\n# Set Seaborn theme\nsns.set_theme(style=\"whitegrid\")\n\n# 1. Job Posting Trends (Bar Chart)\nplt.figure(figsize=(10, 6))\nsns.barplot(x=\"STATE_NAME\", y=\"POSTED\", hue=\"INDUSTRY\", data=df)\nplt.title(\"Job Posting Trends by State\")\nplt.xlabel(\"State\")\nplt.ylabel(\"Number of Job Postings\")\nplt.xticks(rotation=45)\nplt.legend(title=\"Industry\")\nplt.show()\n\n                                         ID LAST_UPDATED_DATE  \\\n0  1f57d95acf4dc67ed2819eb12f049f6a5c11782c        2024-09-06   \n1  0cb072af26757b6c4ea9464472a50a443af681ac        2024-08-02   \n2  85318b12b3331fa490d32ad014379df01855c557        2024-09-06   \n3  1b5c3941e54a1889ef4f8ae55b401a550708a310        2024-09-06   \n4  cb5ca25f02bdf25c13edfede7931508bfd9e858f        2024-06-19   \n\n      LAST_UPDATED_TIMESTAMP  DUPLICATES      POSTED     EXPIRED  DURATION  \\\n0  2024-09-06 20:32:57.352 Z           0  2024-06-02  2024-06-08       6.0   \n1  2024-08-02 17:08:58.838 Z           0  2024-06-02  2024-08-01       NaN   \n2  2024-09-06 20:32:57.352 Z           1  2024-06-02  2024-07-07      35.0   \n3  2024-09-06 20:32:57.352 Z           1  2024-06-02  2024-07-20      48.0   \n4  2024-06-19 07:00:00.000 Z           0  2024-06-02  2024-06-17      15.0   \n\n             SOURCE_TYPES                                        SOURCES  \\\n0       [\\n  \"Company\"\\n]                        [\\n  \"brassring.com\"\\n]   \n1     [\\n  \"Job Board\"\\n]                            [\\n  \"maine.gov\"\\n]   \n2     [\\n  \"Job Board\"\\n]                           [\\n  \"dejobs.org\"\\n]   \n3     [\\n  \"Job Board\"\\n]  [\\n  \"disabledperson.com\",\\n  \"dejobs.org\"\\n]   \n4  [\\n  \"FreeJobBoard\"\\n]                       [\\n  \"craigslist.org\"\\n]   \n\n                                                 URL  ... NAICS_2022_2  \\\n0  [\\n  \"https://sjobs.brassring.com/TGnewUI/Sear...  ...           44   \n1   [\\n  \"https://joblink.maine.gov/jobs/1085740\"\\n]  ...           56   \n2  [\\n  \"https://dejobs.org/dallas-tx/data-analys...  ...           52   \n3  [\\n  \"https://www.disabledperson.com/jobs/5948...  ...           52   \n4  [\\n  \"https://modesto.craigslist.org/sls/77475...  ...           99   \n\n                                   NAICS_2022_2_NAME NAICS_2022_3  \\\n0                                       Retail Trade          441   \n1  Administrative and Support and Waste Managemen...          561   \n2                              Finance and Insurance          524   \n3                              Finance and Insurance          522   \n4                              Unclassified Industry          999   \n\n                              NAICS_2022_3_NAME NAICS_2022_4  \\\n0               Motor Vehicle and Parts Dealers         4413   \n1           Administrative and Support Services         5613   \n2     Insurance Carriers and Related Activities         5242   \n3  Credit Intermediation and Related Activities         5221   \n4                         Unclassified Industry         9999   \n\n                                   NAICS_2022_4_NAME  NAICS_2022_5  \\\n0  Automotive Parts, Accessories, and Tire Retailers         44133   \n1                                Employment Services         56132   \n2  Agencies, Brokerages, and Other Insurance Rela...         52429   \n3                   Depository Credit Intermediation         52211   \n4                              Unclassified Industry         99999   \n\n                            NAICS_2022_5_NAME NAICS_2022_6  \\\n0  Automotive Parts and Accessories Retailers       441330   \n1                     Temporary Help Services       561320   \n2          Other Insurance Related Activities       524291   \n3                          Commercial Banking       522110   \n4                       Unclassified Industry       999999   \n\n                            NAICS_2022_6_NAME  \n0  Automotive Parts and Accessories Retailers  \n1                     Temporary Help Services  \n2                            Claims Adjusting  \n3                          Commercial Banking  \n4                       Unclassified Industry  \n\n[5 rows x 131 columns]\n\n\n\nstate_job_counts = df.groupby(\"STATE_NAME\")[\"TITLE_NAME\"].count().reset_index()\nstate_job_counts = state_job_counts.sort_values(by=\"TITLE_NAME\", ascending=False)\n\nsns.set_theme(style=\"whitegrid\")\n\nplt.figure(figsize=(12, 6))\nsns.barplot(x=\"STATE_NAME\", y=\"TITLE_NAME\", data=state_job_counts, palette=\"viridis\")\n\nplt.title(\"Job Posting Trends by State\", fontsize=14)\nplt.xlabel(\"State\", fontsize=12)\nplt.ylabel(\"Number of Job Postings\", fontsize=12)\nplt.xticks(rotation=45) \nplt.show()\n\nC:\\Users\\ch625\\AppData\\Local\\Temp\\ipykernel_11400\\3708161179.py:7: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(x=\"STATE_NAME\", y=\"TITLE_NAME\", data=state_job_counts, palette=\"viridis\")\n\n\n\n\n\n\n\n\n\n\nstate_job_counts = df.groupby(\"STATE_NAME\")[\"TITLE_NAME\"].count().reset_index()\nstate_job_counts = state_job_counts.sort_values(by=\"TITLE_NAME\", ascending=False).head(10) \nsns.set_theme(style=\"whitegrid\")\n\nplt.figure(figsize=(12, 6))\nsns.barplot(x=\"STATE_NAME\", y=\"TITLE_NAME\", data=state_job_counts, palette=\"viridis\")\n\nplt.title(\"Top 10 States with Highest Job Postings\", fontsize=14)\nplt.xlabel(\"State\", fontsize=12)\nplt.ylabel(\"Number of Job Postings\", fontsize=12)\nplt.xticks(rotation=45) \nplt.show()\n\nC:\\Users\\ch625\\AppData\\Local\\Temp\\ipykernel_11400\\1584174182.py:6: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(x=\"STATE_NAME\", y=\"TITLE_NAME\", data=state_job_counts, palette=\"viridis\")\n\n\n\n\n\n\n\n\n\n\nindustry_job_counts = df.groupby(\"NAICS2_NAME\")[\"TITLE_NAME\"].count().reset_index()\nindustry_job_counts = industry_job_counts.sort_values(by=\"TITLE_NAME\", ascending=False).head(10)\n\nplt.figure(figsize=(12, 6))\nsns.barplot(x=\"NAICS2_NAME\", y=\"TITLE_NAME\", data=industry_job_counts, palette=\"coolwarm\")\n\nplt.title(\"Top 10 Industries with Highest Job Postings\", fontsize=14)\nplt.xlabel(\"Industry\", fontsize=12)\nplt.ylabel(\"Number of Job Postings\", fontsize=12)\nplt.xticks(rotation=45)\nplt.show()\n\nC:\\Users\\ch625\\AppData\\Local\\Temp\\ipykernel_11400\\3675328489.py:5: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(x=\"NAICS2_NAME\", y=\"TITLE_NAME\", data=industry_job_counts, palette=\"coolwarm\")\n\n\n\n\n\n\n\n\n\n\nplt.figure(figsize=(12, 6))\nsns.boxplot(x=\"NAICS2_NAME\", y=\"SALARY_TO\", data=df)\nplt.title(\"Salary Distribution by Industry\", fontsize=14)\nplt.xlabel(\"Industry\", fontsize=12)\nplt.ylabel(\"Salary (Max)\", fontsize=12)\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# 假设 df 是你已经加载的 DataFrame\nif \"EMPLOYMENT_TYPE_NAME\" in df.columns:\n    employment_counts = df[\"EMPLOYMENT_TYPE_NAME\"].value_counts().reset_index()\n    employment_counts.columns = [\"Employment Type\", \"Count\"]\n\n    plt.figure(figsize=(8, 8))\n    plt.pie(employment_counts[\"Count\"], labels=employment_counts[\"Employment Type\"], autopct='%1.1f%%',\n            startangle=140, colors=sns.color_palette(\"pastel\"))\n    plt.title(\"Employment Type Distribution\", fontsize=14)\n    plt.show()\nelse:\n    print(\"Error: Column 'EMPLOYMENT_TYPE_NAME' not found in the dataset.\")\n\n\n\n\n\n\n\n\n\n\nimport plotly.express as px\nimport pandas as pd\n\nfile_path = \"lightcast_job_postings.csv\"  \ndf = pd.read_csv(file_path)\ncity_counts = df['CITY_NAME'].value_counts().reset_index()\ncity_counts.columns = ['CITY_NAME', 'Job Count']\n\n\nfig = px.scatter_geo(city_counts,\n                     locations=\"CITY_NAME\",\n                     locationmode=\"USA-states\",\n                     size=\"Job Count\",\n                     title=\"Job Postings Distribution Across Cities\",\n                     projection=\"natural earth\")\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nimport plotly.express as px\n\ndf_salary = df[(df['SALARY_FROM'] &gt; 0) & (df['SALARY_TO'] &gt; 0)]\n\nfig = px.histogram(df_salary, x=\"SALARY_FROM\", nbins=50, title=\"Interactive Salary Distribution\",\n                   labels={\"SALARY_FROM\": \"Salary Lower Bound\"},\n                   color_discrete_sequence=[\"blue\"])\nfig.update_layout(xaxis_title=\"Salary\", yaxis_title=\"Frequency\", dragmode=\"pan\")\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nimport pandas as pd\nimport plotly.express as px\nfrom geopy.geocoders import Nominatim\nprint(\"Geopy is successfully installed!\")\n\n\n\ncity_counts = df['CITY_NAME'].value_counts().reset_index()\ncity_counts.columns = ['CITY_NAME', 'Job Count']\n\ngeolocator = Nominatim(user_agent=\"geoapiExercises\")\n\ndef get_lat_lon(city):\n    try:\n        location = geolocator.geocode(city + \", USA\")\n        if location:\n            return pd.Series([location.latitude, location.longitude])\n    except:\n        return pd.Series([None, None])\n\ncity_counts[['Latitude', 'Longitude']] = city_counts['CITY_NAME'].apply(get_lat_lon)\n\ncity_counts.dropna(inplace=True)\n\nfig = px.scatter_geo(city_counts, \n                     lat=\"Latitude\", \n                     lon=\"Longitude\", \n                     size=\"Job Count\", \n                     hover_name=\"CITY_NAME\",\n                     title=\"Job Postings Distribution Across Cities\",\n                     projection=\"natural earth\")\n\nfig.update_layout(geo=dict(showcoastlines=True))\nfig.show()\n\nGeopy is successfully installed!\n\n\n\nimport streamlit as st\nimport pandas as pd\nimport plotly.express as px\n\n\nst.title(\"Job Market Analysis\")\n\njob_title = st.selectbox(\"Select a Job Title\", df['TITLE_NAME'].unique())\n\nfiltered_df = df[df['TITLE_NAME'] == job_title]\n\nfig = px.histogram(filtered_df, x=\"SALARY_FROM\", nbins=30, title=f\"Salary Distribution for {job_title}\")\nst.plotly_chart(fig)\n\n2025-02-17 18:10:20.415 \n  Warning: to view this Streamlit app on a browser, run it with the following\n  command:\n\n    streamlit run c:\\Users\\ch625\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n2025-02-17 18:10:20.432 Session state does not function when running a script without `streamlit run`\n\n\nDeltaGenerator()"
  },
  {
    "objectID": "data_analysis.html",
    "href": "data_analysis.html",
    "title": "Data Analysis",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport missingno as msno\nimport plotly.express as px\nimport seaborn as sns\n\ndf = pd.read_csv(\"lightcast_job_postings.csv\")\ndf.head()\n\n\n\n\n\n\n\n\n\nID\nLAST_UPDATED_DATE\nLAST_UPDATED_TIMESTAMP\nDUPLICATES\nPOSTED\nEXPIRED\nDURATION\nSOURCE_TYPES\nSOURCES\nURL\n...\nNAICS_2022_2\nNAICS_2022_2_NAME\nNAICS_2022_3\nNAICS_2022_3_NAME\nNAICS_2022_4\nNAICS_2022_4_NAME\nNAICS_2022_5\nNAICS_2022_5_NAME\nNAICS_2022_6\nNAICS_2022_6_NAME\n\n\n\n\n0\n1f57d95acf4dc67ed2819eb12f049f6a5c11782c\n2024-09-06\n2024-09-06 20:32:57.352 Z\n0\n2024-06-02\n2024-06-08\n6.0\n[\\n \"Company\"\\n]\n[\\n \"brassring.com\"\\n]\n[\\n \"https://sjobs.brassring.com/TGnewUI/Sear...\n...\n44\nRetail Trade\n441\nMotor Vehicle and Parts Dealers\n4413\nAutomotive Parts, Accessories, and Tire Retailers\n44133\nAutomotive Parts and Accessories Retailers\n441330\nAutomotive Parts and Accessories Retailers\n\n\n1\n0cb072af26757b6c4ea9464472a50a443af681ac\n2024-08-02\n2024-08-02 17:08:58.838 Z\n0\n2024-06-02\n2024-08-01\nNaN\n[\\n \"Job Board\"\\n]\n[\\n \"maine.gov\"\\n]\n[\\n \"https://joblink.maine.gov/jobs/1085740\"\\n]\n...\n56\nAdministrative and Support and Waste Managemen...\n561\nAdministrative and Support Services\n5613\nEmployment Services\n56132\nTemporary Help Services\n561320\nTemporary Help Services\n\n\n2\n85318b12b3331fa490d32ad014379df01855c557\n2024-09-06\n2024-09-06 20:32:57.352 Z\n1\n2024-06-02\n2024-07-07\n35.0\n[\\n \"Job Board\"\\n]\n[\\n \"dejobs.org\"\\n]\n[\\n \"https://dejobs.org/dallas-tx/data-analys...\n...\n52\nFinance and Insurance\n524\nInsurance Carriers and Related Activities\n5242\nAgencies, Brokerages, and Other Insurance Rela...\n52429\nOther Insurance Related Activities\n524291\nClaims Adjusting\n\n\n3\n1b5c3941e54a1889ef4f8ae55b401a550708a310\n2024-09-06\n2024-09-06 20:32:57.352 Z\n1\n2024-06-02\n2024-07-20\n48.0\n[\\n \"Job Board\"\\n]\n[\\n \"disabledperson.com\",\\n \"dejobs.org\"\\n]\n[\\n \"https://www.disabledperson.com/jobs/5948...\n...\n52\nFinance and Insurance\n522\nCredit Intermediation and Related Activities\n5221\nDepository Credit Intermediation\n52211\nCommercial Banking\n522110\nCommercial Banking\n\n\n4\ncb5ca25f02bdf25c13edfede7931508bfd9e858f\n2024-06-19\n2024-06-19 07:00:00.000 Z\n0\n2024-06-02\n2024-06-17\n15.0\n[\\n \"FreeJobBoard\"\\n]\n[\\n \"craigslist.org\"\\n]\n[\\n \"https://modesto.craigslist.org/sls/77475...\n...\n99\nUnclassified Industry\n999\nUnclassified Industry\n9999\nUnclassified Industry\n99999\nUnclassified Industry\n999999\nUnclassified Industry\n\n\n\n\n5 rows × 131 columns\n\n\n\n\n\ncolumns_to_drop = [\n    \"ID\", \"URL\", \"ACTIVE_URLS\", \"DUPLICATES\", \"LAST_UPDATED_TIMESTAMP\",\n    \"NAICS_2022_2\", \"NAICS_2022_3\", \"NAICS_2022_4\", \"NAICS_2022_5\",\n    \"SOC_2\", \"SOC_3\", \"SOC_5\"\n]\ndf.drop(columns=columns_to_drop, inplace=True)\n\nIn this case, the following columns are considered irrelevant or redundant: ID, used only for uniquely identifying data rows; URL and ACTIVE_URLS, which contain webpage links with no analytical significance; DUPLICATES, used for internal deduplication; and LAST_UPDATED_TIMESTAMP, which only records data update times. Additionally, NAICS2 - NAICS6 include excessive industry classification codes that may cause redundancy, while SOC_2, SOC_3, and SOC_5 are detailed occupational classifications that do not impact the final analysis. As multiple versions of NAICS/SOC codes, it is important to remove several of them. Since different versions provide similar information but may include duplicates or slight variations, leading to data bloat. Besides, if we do not cancel them, it is possible that we use two different version to analysis. This may cause problem in deeper analysis. In order to improve the accuracy of analysis, we first deleted irrelevant columns to reduce irrelevant data and improve the efficiency of data cleaning. Then remove duplicate data to ensure that each recruitment information is unique to prevent data duplication. Replace categorical variables (such as Industry) with “Unknown” to maintain data integrity.\n\nmsno.heatmap(df)\nplt.title(\"Missing Values Heatmap\")\nplt.show()\n\ndf.dropna(thresh=len(df) * 0.5, axis=1, inplace=True)\n\nnumerical_columns = df.select_dtypes(include=['number']).columns\nfor col in numerical_columns:\n    df[col].fillna(df[col].median(), inplace=True)\ncategorical_columns = df.select_dtypes(include=['object']).columns\nfor col in categorical_columns:\n    df[col].fillna(\"Unknown\", inplace=True)\n\nprint(list(df.columns))\n\n\n\n\n\n\n\n\n['LAST_UPDATED_DATE', 'POSTED', 'EXPIRED', 'DURATION', 'SOURCE_TYPES', 'SOURCES', 'TITLE_RAW', 'BODY', 'MODELED_EXPIRED', 'MODELED_DURATION', 'COMPANY', 'COMPANY_NAME', 'COMPANY_RAW', 'COMPANY_IS_STAFFING', 'EDUCATION_LEVELS', 'EDUCATION_LEVELS_NAME', 'MIN_EDULEVELS', 'MIN_EDULEVELS_NAME', 'EMPLOYMENT_TYPE', 'EMPLOYMENT_TYPE_NAME', 'MIN_YEARS_EXPERIENCE', 'IS_INTERNSHIP', 'REMOTE_TYPE', 'REMOTE_TYPE_NAME', 'LOCATION', 'CITY', 'CITY_NAME', 'COUNTY', 'COUNTY_NAME', 'MSA', 'MSA_NAME', 'STATE', 'STATE_NAME', 'COUNTY_OUTGOING', 'COUNTY_NAME_OUTGOING', 'COUNTY_INCOMING', 'COUNTY_NAME_INCOMING', 'MSA_OUTGOING', 'MSA_NAME_OUTGOING', 'MSA_INCOMING', 'MSA_NAME_INCOMING', 'NAICS2', 'NAICS2_NAME', 'NAICS3', 'NAICS3_NAME', 'NAICS4', 'NAICS4_NAME', 'NAICS5', 'NAICS5_NAME', 'NAICS6', 'NAICS6_NAME', 'TITLE', 'TITLE_NAME', 'TITLE_CLEAN', 'SKILLS', 'SKILLS_NAME', 'SPECIALIZED_SKILLS', 'SPECIALIZED_SKILLS_NAME', 'CERTIFICATIONS', 'CERTIFICATIONS_NAME', 'COMMON_SKILLS', 'COMMON_SKILLS_NAME', 'SOFTWARE_SKILLS', 'SOFTWARE_SKILLS_NAME', 'ONET', 'ONET_NAME', 'ONET_2019', 'ONET_2019_NAME', 'CIP6', 'CIP6_NAME', 'CIP4', 'CIP4_NAME', 'CIP2', 'CIP2_NAME', 'SOC_2021_2', 'SOC_2021_2_NAME', 'SOC_2021_3', 'SOC_2021_3_NAME', 'SOC_2021_4', 'SOC_2021_4_NAME', 'SOC_2021_5', 'SOC_2021_5_NAME', 'LOT_CAREER_AREA', 'LOT_CAREER_AREA_NAME', 'LOT_OCCUPATION', 'LOT_OCCUPATION_NAME', 'LOT_SPECIALIZED_OCCUPATION', 'LOT_SPECIALIZED_OCCUPATION_NAME', 'LOT_OCCUPATION_GROUP', 'LOT_OCCUPATION_GROUP_NAME', 'LOT_V6_SPECIALIZED_OCCUPATION', 'LOT_V6_SPECIALIZED_OCCUPATION_NAME', 'LOT_V6_OCCUPATION', 'LOT_V6_OCCUPATION_NAME', 'LOT_V6_OCCUPATION_GROUP', 'LOT_V6_OCCUPATION_GROUP_NAME', 'LOT_V6_CAREER_AREA', 'LOT_V6_CAREER_AREA_NAME', 'SOC_2_NAME', 'SOC_3_NAME', 'SOC_4', 'SOC_4_NAME', 'SOC_5_NAME', 'NAICS_2022_2_NAME', 'NAICS_2022_3_NAME', 'NAICS_2022_4_NAME', 'NAICS_2022_5_NAME', 'NAICS_2022_6', 'NAICS_2022_6_NAME']\n\n\nIn order to analyze the employment market trends more intuitively, we use the following visualization methods: The bar chart can show the number of recruitments in each industry, and directly show some industries with the highest recruitment demand.The box plot can show the salary distribution of each industry. This chart can show the median and extreme values ​​of salaries in different industries. The pie chart shows the proportion of remote or offline work. The line chart can show the trend more clearly and is used to observe whether AI-related positions are actually growing faster.\n\ntop_20_industries = df[\"NAICS2_NAME\"].value_counts().nlargest(20)\n\nplt.figure(figsize=(10, 6))\ntop_20_industries.plot(kind=\"bar\", color=\"steelblue\")\nplt.title(\"Job Postings by Industry\")\nplt.xlabel(\"Industry\")\nplt.ylabel(\"Job Postings\")\nplt.xticks(rotation=45, ha=\"right\")\nplt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\n\nplt.show()\n\n\n\n\n\n\n\n\nBar Chart: Job Postings by Industry Key Findings 1.- The chart shows that “Professional, Scientific, and Technical Services” has a much higher number of job postings than any other industry, more than double the number of the second industry. This indicates that specialized skills such as technology, engineering, data science, and consulting are in high demand. 2. Higher demand for hiring in Finance and Insurance and Manufacturing indicates a growth in demand for skilled professionals in these sectors. 3. Retail, Arts, Accommodation and Food Services have significantly lower hiring demand, reflecting the fact that these industries may be affected by automation, the economic climate and the development of AI. 4. Higher hiring in Unclassified Industries, which may include emerging industries or cross-cutting positions such as AI R&D and freelancing, suggests that the labor market is undergoing structural change. Key insights Job seekers can focus more on high-demand industries, especially in technology, finance and manufacturing. AI and data-related careers are in high demand, and upgrading skills such as Python, SQL, and machine learning will increase competitiveness. Candidates in low-demand sectors can transition into cross-industry roles, such as tech-related roles or upgrading cross-industry skills.\n\ntop_20_industries = df[\"NAICS_2022_6_NAME\"].value_counts().nlargest(20)\ndf_filtered = df[df[\"NAICS_2022_6_NAME\"].isin(top_20_industries.index)]\n\nsalary_columns = [\"Salary\", \"WAGE\", \"COMPENSATION\", \"HOURLY_RATE\"]\nsalary_col = next((col for col in df.columns if col in salary_columns), None)\n\n\nplt.figure(figsize=(12, 6))\nsns.boxplot(data=df_filtered, x=\"NAICS_2022_6_NAME\", y=salary_col)\n\nplt.title(\"Salary Distribution by Industry\", fontsize=14)\nplt.xticks(rotation=45, ha=\"right\")\nplt.xlabel(\"Industry\")\nplt.ylabel(\"Salary\")\n\nplt.show()\n\n\n\n\n\n\n\n\nBoxplot: Salary Distribution by Industry Key Findings 1. The box plot shows a wide distribution of median salaries by industry, which suggests that there may be large salary gaps between industries. 2. Certain industries have narrower salary distributions, such as General Medical and Surgical Hospitals and Insurance Agencies and Brokerages, suggesting that salaries in these industries are relatively stable and may have standardized salary structures. 3. The impact of outliers touching the far ends of the box plot suggests that extreme high salaries in certain industries (e.g., executive positions, hot tech jobs) can significantly drive up average salaries. Key insights For job seekers looking for higher salaries, focus on industries with wider salary distributions and higher upper quartiles. For job seekers looking for a stable salary, healthcare and education industries offer less salary variability and are ideal for long-term career planning. Industry choice is critical to salary growth, and job seekers can choose a career path that suits them based on salary distribution and their own skills.\n\ndf[\"REMOTE_TYPE_NAME\"] = df[\"REMOTE_TYPE_NAME\"].replace({None: \"On-Site\", \"[None]\": \"On-Site\"})\n\nremote_counts = df[\"REMOTE_TYPE_NAME\"].value_counts()\n\nplt.figure(figsize=(8, 6))\nplt.pie(remote_counts, labels=remote_counts.index, autopct='%1.1f%%', startangle=140, colors=['#636EFA', '#EF553B', '#00CC96', '#AB63FA'])\n\nplt.title(\"Remote vs. On-Site Jobs\", fontsize=14)\n\nplt.show()\n\n\n\n\n\n\n\n\nPie Chart: Remote vs. On-Site Jobs Key Findings 1. 78.3% of jobs are on-site, indicating that despite the growth of remote jobs, most companies still prefer employees to work in the office. 2. Remote jobs make up 17% of the workforce, indicating that the trend toward telecommuting continues to grow. 3. The growth of the Hybrid Remote model, with 3.11% of positions being Hybrid Remote, suggests that some companies are adopting a part remote, part on-site work model to increase employee flexibility and productivity. 4. Not Remote may mean that some positions are explicitly not telecommuting. key insights Hybrid office models are growing, and job seekers can choose flexible work arrangements, such as looking for partially remote positions, to improve life-work balance. On-site work is still the mainstream, and job seekers need to consider industry characteristics and their own needs.\n\nprint(\"Data Cleaning and EDA completed successfully\")\ndf.head()\n\nData Cleaning and EDA completed successfully\n\n\n\n\n\n\n\n\n\n\nLAST_UPDATED_DATE\nPOSTED\nEXPIRED\nDURATION\nSOURCE_TYPES\nSOURCES\nTITLE_RAW\nBODY\nMODELED_EXPIRED\nMODELED_DURATION\n...\nSOC_3_NAME\nSOC_4\nSOC_4_NAME\nSOC_5_NAME\nNAICS_2022_2_NAME\nNAICS_2022_3_NAME\nNAICS_2022_4_NAME\nNAICS_2022_5_NAME\nNAICS_2022_6\nNAICS_2022_6_NAME\n\n\n\n\n0\n2024-09-06\n2024-06-02\n2024-06-08\n6.0\n[\\n \"Company\"\\n]\n[\\n \"brassring.com\"\\n]\nEnterprise Analyst (II-III)\n31-May-2024\\n\\nEnterprise Analyst (II-III)\\n\\n...\n2024-06-08\n6.0\n...\nMathematical Science Occupations\n15-2050\nData Scientists\nData Scientists\nRetail Trade\nMotor Vehicle and Parts Dealers\nAutomotive Parts, Accessories, and Tire Retailers\nAutomotive Parts and Accessories Retailers\n441330\nAutomotive Parts and Accessories Retailers\n\n\n1\n2024-08-02\n2024-06-02\n2024-08-01\n18.0\n[\\n \"Job Board\"\\n]\n[\\n \"maine.gov\"\\n]\nOracle Consultant - Reports (3592)\nOracle Consultant - Reports (3592)\\n\\nat SMX i...\n2024-08-01\n16.0\n...\nMathematical Science Occupations\n15-2050\nData Scientists\nData Scientists\nAdministrative and Support and Waste Managemen...\nAdministrative and Support Services\nEmployment Services\nTemporary Help Services\n561320\nTemporary Help Services\n\n\n2\n2024-09-06\n2024-06-02\n2024-07-07\n35.0\n[\\n \"Job Board\"\\n]\n[\\n \"dejobs.org\"\\n]\nData Analyst\nTaking care of people is at the heart of every...\n2024-06-10\n8.0\n...\nMathematical Science Occupations\n15-2050\nData Scientists\nData Scientists\nFinance and Insurance\nInsurance Carriers and Related Activities\nAgencies, Brokerages, and Other Insurance Rela...\nOther Insurance Related Activities\n524291\nClaims Adjusting\n\n\n3\n2024-09-06\n2024-06-02\n2024-07-20\n48.0\n[\\n \"Job Board\"\\n]\n[\\n \"disabledperson.com\",\\n \"dejobs.org\"\\n]\nSr. Lead Data Mgmt. Analyst - SAS Product Owner\nAbout this role:\\n\\nWells Fargo is looking for...\n2024-06-12\n10.0\n...\nMathematical Science Occupations\n15-2050\nData Scientists\nData Scientists\nFinance and Insurance\nCredit Intermediation and Related Activities\nDepository Credit Intermediation\nCommercial Banking\n522110\nCommercial Banking\n\n\n4\n2024-06-19\n2024-06-02\n2024-06-17\n15.0\n[\\n \"FreeJobBoard\"\\n]\n[\\n \"craigslist.org\"\\n]\nComisiones de $1000 - $3000 por semana... Comi...\nComisiones de $1000 - $3000 por semana... Comi...\n2024-06-17\n15.0\n...\nMathematical Science Occupations\n15-2050\nData Scientists\nData Scientists\nUnclassified Industry\nUnclassified Industry\nUnclassified Industry\nUnclassified Industry\n999999\nUnclassified Industry\n\n\n\n\n5 rows × 109 columns"
  },
  {
    "objectID": "Skill_GapAnalysis.html",
    "href": "Skill_GapAnalysis.html",
    "title": "Job Market Analysis 2024",
    "section": "",
    "text": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nskills_data = {\n    \"Name\": [\"Chao Huang\", \"Mulai Jiang\", \"Liyang Zhou\", \"Yutong Qian\"],\n    \"Python\": [4, 4, 4, 4],\n    \"SQL\": [2, 3, 3, 2],\n    \"Rstudio\": [4, 5, 3, 4],\n    \"Tableau\": [1, 5, 5, 3]\n}\n\n\ndf_skills = pd.DataFrame(skills_data)\ndf_skills.set_index(\"Name\", inplace=True)\nprint(df_skills)\n\n             Python  SQL  Rstudio  Tableau\nName                                      \nChao Huang        4    2        4        1\nMulai Jiang       4    3        5        5\nLiyang Zhou       4    3        3        5\nYutong Qian       4    2        4        3\n\n\n\nplt.figure(figsize=(8, 6))\nsns.heatmap(df_skills, annot=True, cmap=\"coolwarm\", linewidths=0.5)\nplt.title(\"Team Skill Levels Heatmap\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfrom collections import Counter\n\njob_skill_counts = Counter({\n    \"Python\": 120,\n    \"SQL\": 95,\n    \"Rstudio\": 60,\n    \"Tableau\": 80,\n    \"AWS\": 100,\n    \"Docker\": 75\n})\n\n\ntop_skills = list(job_skill_counts.keys())\nfor skill in top_skills:\n    if skill not in df_skills.columns:\n        df_skills[skill] = 0\nprint(df_skills)\n\n             Python  SQL  Rstudio  Tableau  AWS  Docker\nName                                                   \nChao Huang        4    2        4        1    0       0\nMulai Jiang       4    3        5        5    0       0\nLiyang Zhou       4    3        3        5    0       0\nYutong Qian       4    2        4        3    0       0\n\n\ntop_skills = list(job_skill_counts.keys()) for skill in top_skills: if skill not in df_skills.columns: df_skills[skill] = 0 print(df_skills)"
  },
  {
    "objectID": "skill_gap_analysis.html",
    "href": "skill_gap_analysis.html",
    "title": "Job Market Analysis 2024",
    "section": "",
    "text": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nskills_data = {\n    \"Name\": [\"Chao Huang\", \"Mulai Jiang\", \"Liyang Zhou\", \"Yutong Qian\"],\n    \"Python\": [4, 4, 4, 4],\n    \"SQL\": [2, 3, 3, 2],\n    \"Rstudio\": [4, 5, 3, 4],\n    \"Tableau\": [1, 5, 5, 3]\n}\n\n\ndf_skills = pd.DataFrame(skills_data)\ndf_skills.set_index(\"Name\", inplace=True)\nprint(df_skills)\n\n             Python  SQL  Rstudio  Tableau\nName                                      \nChao Huang        4    2        4        1\nMulai Jiang       4    3        5        5\nLiyang Zhou       4    3        3        5\nYutong Qian       4    2        4        3\n\n\n\nplt.figure(figsize=(8, 6))\nsns.heatmap(df_skills, annot=True, cmap=\"coolwarm\", linewidths=0.5)\nplt.title(\"Team Skill Levels Heatmap\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfrom collections import Counter\n\njob_skill_counts = Counter({\n    \"Python\": 120,\n    \"SQL\": 95,\n    \"Rstudio\": 60,\n    \"Tableau\": 80,\n    \"AWS\": 100,\n    \"Docker\": 75\n})\n\n\ntop_skills = list(job_skill_counts.keys())\nfor skill in top_skills:\n    if skill not in df_skills.columns:\n        df_skills[skill] = 0\nprint(df_skills)\n\n             Python  SQL  Rstudio  Tableau  AWS  Docker\nName                                                   \nChao Huang        4    2        4        1    0       0\nMulai Jiang       4    3        5        5    0       0\nLiyang Zhou       4    3        3        5    0       0\nYutong Qian       4    2        4        3    0       0\n\n\nRecommendations： Based on the skill gap analysis, our team is strong in Python and Rstudio, and shows advanced data visualization abilities, especially Tableau for two members. However, no one currently has experience with AWS or Docker, which are high-demand skills in the job market.\nIndividual Recommendations:\nChao Huang\nStrengths: Python, Rstudio Suggested improvements: Learn Tableau for dashboard building and storytelling. Begin AWS Cloud Fundamentals. Recommended Resources: Coursera: “AWS Cloud Practitioner Essentials” YouTube: “Tableau for Beginners – Full Course”\nMulai Jiang\nStrengths: Python, Rstudio, Tableau Suggested improvements: Improve SQL for better data querying. Learn Docker to understand DevOps workflows. Recommended Resources: Khan Academy / Mode Analytics SQL Track Udemy: “Docker & Kubernetes for Beginners”\nLiyang Zhou\nStrengths: Python, Tableau Suggested improvements: Deepen Rstudio usage for data analysis. Begin AWS for cloud deployment knowledge. Recommended Resources: edX: “Introduction to R for Data Science” AWS Skill Builder (free cloud labs)\nYutong Qian\nStrengths: Python, Rstudio Suggested improvements: Strengthen SQL skills. Learn Docker for pipeline and automation. Recommended Resources: DataCamp: “Intermediate SQL” Docker Official Docs (play with Docker playground) Team Collaboration Suggestions We recommend that the team hold regular weekly learning sessions on AWS and Docker to help all members build basic cloud computing. In terms of data analysis, SQL and Rstudio can be mastered through pair programming, with skilled members leading the overall improvement. As a practical project, we recommend that everyone work together to complete a dashboard system based on Tableau visualization and deployed through AWS, so that data visualization and cloud deployment capabilities can be exercised in real projects."
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "Introduction\nAI is completely disrupting various industries, and it makes us all wondering about what this will mean for jobs. Although some sectors are gaining more jobs due to AI automation, others are trimming staff. In the middle of all this, job seekers definitely need to get a grip on which jobs are emerging in the AI era and what they need to be training for.\nTherefore, to begin with, we need to look at the trends in the job market for AI jobs and normal jobs. This research is all about determining whether AI is indeed creating more jobs or simply eliminating the traditional ones, as well as which sectors are being boosted by it, and what qualifications are required for AI jobs versus the normal ones. AI will probably create new career paths while reconfiguring existing ones [@soueidan2024impact].By examining employment trends, pay comparisons, and skill demand, we want to offer some advice on how people can prepare for the evolving workforce."
  },
  {
    "objectID": "data_cleaning.html",
    "href": "data_cleaning.html",
    "title": "Job Market Analysis 2024",
    "section": "",
    "text": "import pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv(\"lightcast_job_postings.csv\")\ndf.info()\nprint(df.head())\n\n#replace the missing Values\nmissing_values = df.isnull().sum()\nmissing_percentage = (missing_values / len(df)) * 100\nmissing_data = pd.DataFrame({\"Missing Values\": missing_values, \"Percentage\": missing_percentage})\nmissing_data = missing_data[missing_data[\"Missing Values\"] &gt; 0]\nmissing_data = missing_data.sort_values(by=\"Percentage\", ascending=False)\n\nsalary_median = df[\"SALARY\"].median()\ndf[\"SALARY\"].fillna(salary_median, inplace=True)\n\n#convert time columns\ndate_columns = [\"LAST_UPDATED_DATE\", \"LAST_UPDATED_TIMESTAMP\", \"POSTED\", \"EXPIRED\"]\nfor col in date_columns:\n    if col in df.columns:  \n        df[col] = pd.to_datetime(df[col], errors=\"coerce\", utc=True) \n\n#Extract Data\nselected_columns = df[['TITLE', 'SALARY', 'SALARY_FROM', 'SALARY_TO', 'SKILLS']]\nprint(selected_columns.head())\nselected_columns.to_csv('Extracted_data.csv', index=False)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 72476 entries, 0 to 72475\nColumns: 131 entries, ID to NAICS_2022_6_NAME\ndtypes: bool(2), float64(11), int64(27), object(91)\nmemory usage: 71.5+ MB\n                                         ID LAST_UPDATED_DATE  \\\n0  1f57d95acf4dc67ed2819eb12f049f6a5c11782c        2024-09-06   \n1  0cb072af26757b6c4ea9464472a50a443af681ac        2024-08-02   \n2  85318b12b3331fa490d32ad014379df01855c557        2024-09-06   \n3  1b5c3941e54a1889ef4f8ae55b401a550708a310        2024-09-06   \n4  cb5ca25f02bdf25c13edfede7931508bfd9e858f        2024-06-19   \n\n      LAST_UPDATED_TIMESTAMP  DUPLICATES      POSTED     EXPIRED  DURATION  \\\n0  2024-09-06 20:32:57.352 Z           0  2024-06-02  2024-06-08       6.0   \n1  2024-08-02 17:08:58.838 Z           0  2024-06-02  2024-08-01       NaN   \n2  2024-09-06 20:32:57.352 Z           1  2024-06-02  2024-07-07      35.0   \n3  2024-09-06 20:32:57.352 Z           1  2024-06-02  2024-07-20      48.0   \n4  2024-06-19 07:00:00.000 Z           0  2024-06-02  2024-06-17      15.0   \n\n             SOURCE_TYPES                                        SOURCES  \\\n0       [\\n  \"Company\"\\n]                        [\\n  \"brassring.com\"\\n]   \n1     [\\n  \"Job Board\"\\n]                            [\\n  \"maine.gov\"\\n]   \n2     [\\n  \"Job Board\"\\n]                           [\\n  \"dejobs.org\"\\n]   \n3     [\\n  \"Job Board\"\\n]  [\\n  \"disabledperson.com\",\\n  \"dejobs.org\"\\n]   \n4  [\\n  \"FreeJobBoard\"\\n]                       [\\n  \"craigslist.org\"\\n]   \n\n                                                 URL  ... NAICS_2022_2  \\\n0  [\\n  \"https://sjobs.brassring.com/TGnewUI/Sear...  ...           44   \n1   [\\n  \"https://joblink.maine.gov/jobs/1085740\"\\n]  ...           56   \n2  [\\n  \"https://dejobs.org/dallas-tx/data-analys...  ...           52   \n3  [\\n  \"https://www.disabledperson.com/jobs/5948...  ...           52   \n4  [\\n  \"https://modesto.craigslist.org/sls/77475...  ...           99   \n\n                                   NAICS_2022_2_NAME NAICS_2022_3  \\\n0                                       Retail Trade          441   \n1  Administrative and Support and Waste Managemen...          561   \n2                              Finance and Insurance          524   \n3                              Finance and Insurance          522   \n4                              Unclassified Industry          999   \n\n                              NAICS_2022_3_NAME NAICS_2022_4  \\\n0               Motor Vehicle and Parts Dealers         4413   \n1           Administrative and Support Services         5613   \n2     Insurance Carriers and Related Activities         5242   \n3  Credit Intermediation and Related Activities         5221   \n4                         Unclassified Industry         9999   \n\n                                   NAICS_2022_4_NAME  NAICS_2022_5  \\\n0  Automotive Parts, Accessories, and Tire Retailers         44133   \n1                                Employment Services         56132   \n2  Agencies, Brokerages, and Other Insurance Rela...         52429   \n3                   Depository Credit Intermediation         52211   \n4                              Unclassified Industry         99999   \n\n                            NAICS_2022_5_NAME NAICS_2022_6  \\\n0  Automotive Parts and Accessories Retailers       441330   \n1                     Temporary Help Services       561320   \n2          Other Insurance Related Activities       524291   \n3                          Commercial Banking       522110   \n4                       Unclassified Industry       999999   \n\n                            NAICS_2022_6_NAME  \n0  Automotive Parts and Accessories Retailers  \n1                     Temporary Help Services  \n2                            Claims Adjusting  \n3                          Commercial Banking  \n4                       Unclassified Industry  \n\n[5 rows x 131 columns]\n                TITLE    SALARY  SALARY_FROM  SALARY_TO  \\\n0  ET29C073C03D1F86B4  116348.5          NaN        NaN   \n1  ET21DDA63780A7DC09  116348.5          NaN        NaN   \n2  ET3037E0C947A02404  116348.5          NaN        NaN   \n3  ET2114E0404BA30075  116348.5          NaN        NaN   \n4  ET0000000000000000   92500.0      35000.0   150000.0   \n\n                                              SKILLS  \n0  [\\n  \"KS126DB6T061MHD7RTGQ\",\\n  \"KS126706DPFD3...  \n1  [\\n  \"KS122626T550SLQ7QZ1C\",\\n  \"KS123YJ6KVWC9...  \n2  [\\n  \"KS1218W78FGVPVP2KXPX\",\\n  \"ESF3939CE1F80...  \n3  [\\n  \"KS123QX62QYTC4JF38H8\",\\n  \"KS7G6NP6R6L1H...  \n4                                                 []"
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Job Market Analysis 2024",
    "section": "",
    "text": "Exploratory Data Analysis & Visualization\n\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv(\"lightcast_job_postings.csv\")\n\nstate_job_counts = df.groupby(\"STATE_NAME\")[\"TITLE_NAME\"].count().reset_index()\nstate_job_counts = state_job_counts.sort_values(by=\"TITLE_NAME\", ascending=False).head(10) \nsns.set_theme(style=\"whitegrid\")\n\nplt.figure(figsize=(12, 6))\nsns.barplot(x=\"STATE_NAME\", y=\"TITLE_NAME\", data=state_job_counts, palette=\"viridis\")\n\nplt.title(\"Top 10 States with Highest Job Postings\", fontsize=14)\nplt.xlabel(\"State\", fontsize=12)\nplt.ylabel(\"Number of Job Postings\", fontsize=12)\nplt.xticks(rotation=45) \nplt.show()\n\nFutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n\n\n\n\n\n\n\n\n\n\n\nindustry_job_counts = df.groupby(\"NAICS2_NAME\")[\"TITLE_NAME\"].count().reset_index()\nindustry_job_counts = industry_job_counts.sort_values(by=\"TITLE_NAME\", ascending=False).head(10)\n\nplt.figure(figsize=(12, 6))\nsns.barplot(x=\"NAICS2_NAME\", y=\"TITLE_NAME\", data=industry_job_counts, palette=\"coolwarm\")\n\nplt.title(\"Top 10 Industries with Highest Job Postings\", fontsize=14)\nplt.xlabel(\"Industry\", fontsize=12)\nplt.ylabel(\"Number of Job Postings\", fontsize=12)\nplt.xticks(rotation=45)\nplt.show()\n\nFutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n\n\n\n\n\n\n\n\n\n\n\nplt.figure(figsize=(12, 6))\nsns.boxplot(x=\"NAICS2_NAME\", y=\"SALARY_TO\", data=df)\nplt.title(\"Salary Distribution by Industry\", fontsize=14)\nplt.xlabel(\"Industry\", fontsize=12)\nplt.ylabel(\"Salary (Max)\", fontsize=12)\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\n\nif \"EMPLOYMENT_TYPE_NAME\" in df.columns:\n    employment_counts = df[\"EMPLOYMENT_TYPE_NAME\"].value_counts().reset_index()\n    employment_counts.columns = [\"Employment Type\", \"Count\"]\n\n    plt.figure(figsize=(8, 8))\n    plt.pie(employment_counts[\"Count\"], labels=employment_counts[\"Employment Type\"], autopct='%1.1f%%',\n            startangle=140, colors=sns.color_palette(\"pastel\"))\n    plt.title(\"Employment Type Distribution\", fontsize=14)\n    plt.show()\nelse:\n    print(\"Error: Column 'EMPLOYMENT_TYPE_NAME' not found in the dataset.\")\n\n\n\n\n\n\n\n\n\nimport pandas as pd\nimport plotly.express as px\n\n\n\ndf_salary = df[(df['SALARY_FROM'] &gt; 0) & (df['SALARY_TO'] &gt; 0)]\n\nfig = px.histogram(df_salary, x=\"SALARY_FROM\", nbins=50, title=\"Interactive Salary Distribution\",\n        labels={\"SALARY_FROM\": \"Salary Lower Bound\"},\n        color_discrete_sequence=[\"blue\"])\nfig.update_layout(xaxis_title=\"Salary\", yaxis_title=\"Frequency\", dragmode=\"pan\")\nfig.show()"
  }
]