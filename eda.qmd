**Exploratory Data Analysis & Visualization**

```{python}
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("lightcast_job_postings.csv")

state_job_counts = df.groupby("STATE_NAME")["TITLE_NAME"].count().reset_index()
state_job_counts = state_job_counts.sort_values(by="TITLE_NAME", ascending=False).head(10) 
sns.set_theme(style="whitegrid")

plt.figure(figsize=(12, 6))
sns.barplot(x="STATE_NAME", y="TITLE_NAME", data=state_job_counts, palette="viridis")

plt.title("Top 10 States with Highest Job Postings", fontsize=14)
plt.xlabel("State", fontsize=12)
plt.ylabel("Number of Job Postings", fontsize=12)
plt.xticks(rotation=45) 
plt.show()
```

```{python}
industry_job_counts = df.groupby("NAICS2_NAME")["TITLE_NAME"].count().reset_index()
industry_job_counts = industry_job_counts.sort_values(by="TITLE_NAME", ascending=False).head(10)

plt.figure(figsize=(12, 6))
sns.barplot(x="NAICS2_NAME", y="TITLE_NAME", data=industry_job_counts, palette="coolwarm")

plt.title("Top 10 Industries with Highest Job Postings", fontsize=14)
plt.xlabel("Industry", fontsize=12)
plt.ylabel("Number of Job Postings", fontsize=12)
plt.xticks(rotation=45)
plt.show()
```

```{python}
plt.figure(figsize=(12, 6))
sns.boxplot(x="NAICS2_NAME", y="SALARY_TO", data=df)
plt.title("Salary Distribution by Industry", fontsize=14)
plt.xlabel("Industry", fontsize=12)
plt.ylabel("Salary (Max)", fontsize=12)
plt.xticks(rotation=45)
plt.show()
```

```{python}
if "EMPLOYMENT_TYPE_NAME" in df.columns:
    employment_counts = df["EMPLOYMENT_TYPE_NAME"].value_counts().reset_index()
    employment_counts.columns = ["Employment Type", "Count"]

    plt.figure(figsize=(8, 8))
    plt.pie(employment_counts["Count"], labels=employment_counts["Employment Type"], autopct='%1.1f%%',
            startangle=140, colors=sns.color_palette("pastel"))
    plt.title("Employment Type Distribution", fontsize=14)
    plt.show()
else:
    print("Error: Column 'EMPLOYMENT_TYPE_NAME' not found in the dataset.")
```

```{python}
import pandas as pd
import plotly.express as px



df_salary = df[(df['SALARY_FROM'] > 0) & (df['SALARY_TO'] > 0)]

fig = px.histogram(df_salary, x="SALARY_FROM", nbins=50, title="Interactive Salary Distribution",
        labels={"SALARY_FROM": "Salary Lower Bound"},
        color_discrete_sequence=["blue"])
fig.update_layout(xaxis_title="Salary", yaxis_title="Frequency", dragmode="pan")
fig.show()
```