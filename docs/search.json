[
  {
    "objectID": "ml_methods.html",
    "href": "ml_methods.html",
    "title": "Job Market Analysis 2024",
    "section": "",
    "text": "import pandas as pd\ndf = pd.read_csv('lightcast_job_postings.csv')\ndf.head()\n\n\n\n\n\n\n\n\n\nID\nLAST_UPDATED_DATE\nLAST_UPDATED_TIMESTAMP\nDUPLICATES\nPOSTED\nEXPIRED\nDURATION\nSOURCE_TYPES\nSOURCES\nURL\n...\nNAICS_2022_2\nNAICS_2022_2_NAME\nNAICS_2022_3\nNAICS_2022_3_NAME\nNAICS_2022_4\nNAICS_2022_4_NAME\nNAICS_2022_5\nNAICS_2022_5_NAME\nNAICS_2022_6\nNAICS_2022_6_NAME\n\n\n\n\n0\n1f57d95acf4dc67ed2819eb12f049f6a5c11782c\n2024-09-06\n2024-09-06 20:32:57.352 Z\n0\n2024-06-02\n2024-06-08\n6.0\n[\\n \"Company\"\\n]\n[\\n \"brassring.com\"\\n]\n[\\n \"https://sjobs.brassring.com/TGnewUI/Sear...\n...\n44\nRetail Trade\n441\nMotor Vehicle and Parts Dealers\n4413\nAutomotive Parts, Accessories, and Tire Retailers\n44133\nAutomotive Parts and Accessories Retailers\n441330\nAutomotive Parts and Accessories Retailers\n\n\n1\n0cb072af26757b6c4ea9464472a50a443af681ac\n2024-08-02\n2024-08-02 17:08:58.838 Z\n0\n2024-06-02\n2024-08-01\nNaN\n[\\n \"Job Board\"\\n]\n[\\n \"maine.gov\"\\n]\n[\\n \"https://joblink.maine.gov/jobs/1085740\"\\n]\n...\n56\nAdministrative and Support and Waste Managemen...\n561\nAdministrative and Support Services\n5613\nEmployment Services\n56132\nTemporary Help Services\n561320\nTemporary Help Services\n\n\n2\n85318b12b3331fa490d32ad014379df01855c557\n2024-09-06\n2024-09-06 20:32:57.352 Z\n1\n2024-06-02\n2024-07-07\n35.0\n[\\n \"Job Board\"\\n]\n[\\n \"dejobs.org\"\\n]\n[\\n \"https://dejobs.org/dallas-tx/data-analys...\n...\n52\nFinance and Insurance\n524\nInsurance Carriers and Related Activities\n5242\nAgencies, Brokerages, and Other Insurance Rela...\n52429\nOther Insurance Related Activities\n524291\nClaims Adjusting\n\n\n3\n1b5c3941e54a1889ef4f8ae55b401a550708a310\n2024-09-06\n2024-09-06 20:32:57.352 Z\n1\n2024-06-02\n2024-07-20\n48.0\n[\\n \"Job Board\"\\n]\n[\\n \"disabledperson.com\",\\n \"dejobs.org\"\\n]\n[\\n \"https://www.disabledperson.com/jobs/5948...\n...\n52\nFinance and Insurance\n522\nCredit Intermediation and Related Activities\n5221\nDepository Credit Intermediation\n52211\nCommercial Banking\n522110\nCommercial Banking\n\n\n4\ncb5ca25f02bdf25c13edfede7931508bfd9e858f\n2024-06-19\n2024-06-19 07:00:00.000 Z\n0\n2024-06-02\n2024-06-17\n15.0\n[\\n \"FreeJobBoard\"\\n]\n[\\n \"craigslist.org\"\\n]\n[\\n \"https://modesto.craigslist.org/sls/77475...\n...\n99\nUnclassified Industry\n999\nUnclassified Industry\n9999\nUnclassified Industry\n99999\nUnclassified Industry\n999999\nUnclassified Industry\n\n\n\n\n5 rows × 131 columns\n\n\n\n\n\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nimport plotly.express as px\n\n\ndf.info()\ndf.isna().sum()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 72476 entries, 0 to 72475\nColumns: 131 entries, ID to NAICS_2022_6_NAME\ndtypes: bool(2), float64(11), int64(27), object(91)\nmemory usage: 71.5+ MB\n\n\nID                        0\nLAST_UPDATED_DATE         0\nLAST_UPDATED_TIMESTAMP    0\nDUPLICATES                0\nPOSTED                    0\n                         ..\nNAICS_2022_4_NAME         0\nNAICS_2022_5              0\nNAICS_2022_5_NAME         0\nNAICS_2022_6              0\nNAICS_2022_6_NAME         0\nLength: 131, dtype: int64\n\n\n\ndf['TITLE_NAME'] = df['TITLE_NAME'].astype(str)\ndf['IS_AI_ROLE'] = df['TITLE_NAME'].str.lower().str.contains(\n    'data|ai|machine learning|ml|artificial intelligence'\n).astype(int)\ndf['IS_AI_ROLE'].value_counts()\n\nIS_AI_ROLE\n0    48310\n1    24166\nName: count, dtype: int64\n\n\n\nfeatures = ['REMOTE_TYPE_NAME', 'EDUCATION_LEVELS_NAME', 'NAICS_2022_2_NAME', 'MAX_YEARS_EXPERIENCE']\ndf_model = df[features + ['IS_AI_ROLE']].dropna()\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\n\nX = df_model[features]\ny = df_model['IS_AI_ROLE']\n\nencoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')\nX_encoded = encoder.fit_transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)\n\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nclf = LogisticRegression(max_iter=1000)\nclf.fit(X_train, y_train)\n\ny_pred = clf.predict(X_test)\n\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\n\n[[865 175]\n [354 292]]\n              precision    recall  f1-score   support\n\n           0       0.71      0.83      0.77      1040\n           1       0.63      0.45      0.52       646\n\n    accuracy                           0.69      1686\n   macro avg       0.67      0.64      0.65      1686\nweighted avg       0.68      0.69      0.67      1686\n\n\n\n\nimport plotly.express as px\n\ny_probs = clf.predict_proba(X_test)[:, 1]\nfig = px.histogram(x=y_probs, nbins=50, title=\"Predicted Probability of AI Job\", labels={'x': 'Probability'})\nfig.show()\n\n                            \n                                            \n\n\nThis histogram shows the predicted probabilities of jobs being AI-related, with most values falling between 0.2 and 0.6, indicating that the model has moderate confidence in distinguishing AI from non-AI roles.\n\nimport numpy as np\n\nfeatures_cat = ['REMOTE_TYPE_NAME', 'EDUCATION_LEVELS_NAME', 'NAICS_2022_2_NAME']\nfeatures_num = ['MAX_YEARS_EXPERIENCE', 'DURATION']\n\ndf_model = df[features_cat + features_num + ['IS_AI_ROLE']].dropna()\n\nX_cat = df_model[features_cat]\nX_num = df_model[features_num]\ny = df_model['IS_AI_ROLE']\n\nencoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')\nX_cat_encoded = encoder.fit_transform(X_cat)\n\nX_full = np.hstack((X_cat_encoded, X_num.values))\n\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_full, y, test_size=0.2, random_state=42)\nfrom sklearn.linear_model import LogisticRegression\n\nclf = LogisticRegression(max_iter=1000)\nclf.fit(X_train, y_train)\n\ny_pred = clf.predict(X_test)\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\n\n[[498  97]\n [250 163]]\n              precision    recall  f1-score   support\n\n           0       0.67      0.84      0.74       595\n           1       0.63      0.39      0.48       413\n\n    accuracy                           0.66      1008\n   macro avg       0.65      0.62      0.61      1008\nweighted avg       0.65      0.66      0.64      1008\n\n\n\n\nimport plotly.express as px\n\ny_probs = clf.predict_proba(X_test)[:, 1]\nfig = px.histogram(x=y_probs, nbins=50, title=\"Predicted Probability of AI Job (Enhanced Features)\", labels={'x': 'Probability'})\nfig.show()\n\n                            \n                                            \n\n\nThis histogram displays the predicted probabilities of jobs being AI-related using enhanced features, showing a concentration around 0.3 to 0.6, which suggests the model still struggles to confidently separate AI from non-AI positions.\n\ndf['SALARY_FROM'] = pd.to_numeric(df['SALARY_FROM'], errors='coerce')\ndf['SALARY_TO'] = pd.to_numeric(df['SALARY_TO'], errors='coerce')\ndf['AVG_SALARY'] = (df['SALARY_FROM'] + df['SALARY_TO']) / 2\n\n\nfeatures_cat = ['REMOTE_TYPE_NAME', 'EDUCATION_LEVELS_NAME', 'NAICS_2022_2_NAME']\nfeatures_num = ['MAX_YEARS_EXPERIENCE', 'DURATION', 'IS_AI_ROLE']\ntarget = 'AVG_SALARY'\n\ndf_reg = df[features_cat + features_num + [target]].dropna()\n\n\nX_cat = df_reg[features_cat]\nX_num = df_reg[features_num]\ny = df_reg[target]\n\nencoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')\nX_cat_encoded = encoder.fit_transform(X_cat)\n\nimport numpy as np\nX_full = np.hstack((X_cat_encoded, X_num.values))\n\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score\n\nX_train, X_test, y_train, y_test = train_test_split(X_full, y, test_size=0.2, random_state=42)\n\nreg = LinearRegression()\nreg.fit(X_train, y_train)\n\n\ny_pred = reg.predict(X_test)\n\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nr2 = r2_score(y_test, y_pred)\nprint(f\"RMSE: {rmse:.2f}\")\nprint(f\"R² Score: {r2:.3f}\")\n\nRMSE: 27763.52\nR² Score: 0.409\n\n\n\nimport plotly.express as px\nimport pandas as pd\n\ndf_plot = pd.DataFrame({\n    'Actual Salary': y_test,\n    'Predicted Salary': y_pred\n})\n\nfig = px.scatter(df_plot, x='Actual Salary', y='Predicted Salary', trendline='ols',\n                 title='Actual vs. Predicted Salary')\nfig.show()\n\n                            \n                                            \n\n\nThis scatter plot compares actual vs. predicted salaries from the regression model, with the trendline indicating a positive correlation and generally accurate predictions, though deviations increase at higher salary levels.\n\nimport statsmodels.api as sm\n\nX_cat = df_reg[features_cat]\nX_num = df_reg[features_num]\ny = df_reg[target]\n\n\nX_cat_encoded = encoder.fit_transform(X_cat)\nX_full = np.hstack((X_cat_encoded, X_num.values))\n\n\nX_full_const = sm.add_constant(X_full)\n\n\nmodel = sm.OLS(y, X_full_const).fit()\n\nprint(model.summary())\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:             AVG_SALARY   R-squared:                       0.419\nModel:                            OLS   Adj. R-squared:                  0.408\nMethod:                 Least Squares   F-statistic:                     38.26\nDate:                Fri, 02 May 2025   Prob (F-statistic):          1.03e-233\nTime:                        20:19:54   Log-Likelihood:                -27208.\nNo. Observations:                2325   AIC:                         5.450e+04\nDf Residuals:                    2281   BIC:                         5.476e+04\nDf Model:                          43                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst       4.844e+04   3076.562     15.744      0.000    4.24e+04    5.45e+04\nx1          6185.2580   3901.325      1.585      0.113   -1465.258    1.38e+04\nx2          6240.6035   4529.491      1.378      0.168   -2641.748    1.51e+04\nx3          1.964e+04   1930.887     10.172      0.000    1.59e+04    2.34e+04\nx4          1.637e+04   1749.327      9.359      0.000    1.29e+04    1.98e+04\nx5         -1.815e+04   8064.455     -2.250      0.025    -3.4e+04   -2334.413\nx6         -7593.2178   6654.948     -1.141      0.254   -2.06e+04    5457.165\nx7          2088.7084   1.29e+04      0.162      0.871   -2.32e+04    2.73e+04\nx8         -5.321e+04   2.82e+04     -1.887      0.059   -1.08e+05    2089.448\nx9          8243.6458   3043.062      2.709      0.007    2276.187    1.42e+04\nx10         2.211e+04   3301.251      6.698      0.000    1.56e+04    2.86e+04\nx11         2.888e+04   4903.334      5.889      0.000    1.93e+04    3.85e+04\nx12         1.649e+04   9201.957      1.792      0.073   -1550.958    3.45e+04\nx13        -2.381e+04   5411.642     -4.399      0.000   -3.44e+04   -1.32e+04\nx14         1.659e+04   1.65e+04      1.008      0.314   -1.57e+04    4.89e+04\nx15        -1.905e+04    1.3e+04     -1.468      0.142   -4.45e+04    6388.395\nx16        -1.674e+04    2.2e+04     -0.759      0.448      -6e+04    2.65e+04\nx17        -2.524e+04   4699.026     -5.371      0.000   -3.45e+04    -1.6e+04\nx18         2895.4505   1.43e+04      0.203      0.839   -2.51e+04    3.09e+04\nx19         2.791e+04   7087.566      3.938      0.000     1.4e+04    4.18e+04\nx20         3.086e+04   1.19e+04      2.601      0.009    7594.241    5.41e+04\nx21         1.571e+04   3258.754      4.822      0.000    9321.700    2.21e+04\nx22         4.044e+04   1.64e+04      2.462      0.014    8226.015    7.26e+04\nx23         5021.4975   7086.938      0.709      0.479   -8876.020    1.89e+04\nx24         5513.9066   2422.785      2.276      0.023     762.815    1.03e+04\nx25         -1.09e+04      2e+04     -0.545      0.586   -5.01e+04    2.83e+04\nx26         8921.1183   8685.952      1.027      0.304   -8112.072     2.6e+04\nx27         1.828e+04   4057.113      4.505      0.000    1.03e+04    2.62e+04\nx28        -9030.8811   3559.594     -2.537      0.011    -1.6e+04   -2050.501\nx29         7481.3685   2411.669      3.102      0.002    2752.074    1.22e+04\nx30         5487.7656   3317.028      1.654      0.098   -1016.941     1.2e+04\nx31        -2470.4504   2880.731     -0.858      0.391   -8119.578    3178.677\nx32        -1674.6292   1.27e+04     -0.132      0.895   -2.66e+04    2.33e+04\nx33         4946.7968   3778.383      1.309      0.191   -2462.628    1.24e+04\nx34        -1069.9221   1.64e+04     -0.065      0.948   -3.31e+04     3.1e+04\nx35        -4538.9700   6867.044     -0.661      0.509    -1.8e+04    8927.335\nx36         8610.4137   2229.705      3.862      0.000    4237.952     1.3e+04\nx37        -1.016e+04   9611.329     -1.058      0.290    -2.9e+04    8683.526\nx38         1.702e+04   3814.113      4.463      0.000    9543.213    2.45e+04\nx39         1567.8333   4262.420      0.368      0.713   -6790.791    9926.457\nx40        -2361.9051   9143.105     -0.258      0.796   -2.03e+04    1.56e+04\nx41         1504.9433   2431.035      0.619      0.536   -3262.327    6272.213\nx42         6621.0132   6606.447      1.002      0.316   -6334.260    1.96e+04\nx43         -326.6600   2612.269     -0.125      0.900   -5449.332    4796.012\nx44         7778.2154    276.312     28.150      0.000    7236.366    8320.064\nx45          -33.0613     44.169     -0.749      0.454    -119.677      53.555\nx46        -8409.9107   1418.748     -5.928      0.000   -1.12e+04   -5627.739\n==============================================================================\nOmnibus:                     2668.528   Durbin-Watson:                   1.899\nProb(Omnibus):                  0.000   Jarque-Bera (JB):          1149034.332\nSkew:                           5.268   Prob(JB):                         0.00\nKurtosis:                     111.397   Cond. No.                     1.16e+16\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The smallest eigenvalue is 1.4e-26. This might indicate that there are\nstrong multicollinearity problems or that the design matrix is singular.\n\n\n\ndf_cluster = df[['SALARY_FROM', 'SALARY_TO', 'MAX_YEARS_EXPERIENCE', 'DURATION', 'IS_AI_ROLE']].dropna()\ndf_cluster['AVG_SALARY'] = (df_cluster['SALARY_FROM'] + df_cluster['SALARY_TO']) / 2\n\nX_cluster = df_cluster[['AVG_SALARY', 'MAX_YEARS_EXPERIENCE', 'DURATION', 'IS_AI_ROLE']]\n\n\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_cluster)\n\n\nfrom sklearn.cluster import KMeans\n\nkmeans = KMeans(n_clusters=4, random_state=42)\ndf_cluster['Cluster'] = kmeans.fit_predict(X_scaled)\n\n\nfrom sklearn.decomposition import PCA\nimport plotly.express as px\n\npca = PCA(n_components=2)\ncomponents = pca.fit_transform(X_scaled)\n\ndf_cluster['PC1'] = components[:, 0]\ndf_cluster['PC2'] = components[:, 1]\n\nfig = px.scatter(\n    df_cluster,\n    x='PC1', y='PC2',\n    color='Cluster',\n    title=\"KMeans Clustering of Job Types\",\n    labels={'Cluster': 'Cluster ID'},\n    opacity=0.7\n)\nfig.show()\n\n                            \n                                            \n\n\nThis scatter plot visualizes KMeans clustering results using PCA-reduced features, revealing four distinct job clusters based on salary, experience, duration, and AI classification.\n\ncluster_summary = df_cluster.groupby('Cluster')[['AVG_SALARY', 'MAX_YEARS_EXPERIENCE', 'DURATION', 'IS_AI_ROLE']].mean().round(1)\ndisplay(cluster_summary)\n\n\n\n\n\n\n\n\n\nAVG_SALARY\nMAX_YEARS_EXPERIENCE\nDURATION\nIS_AI_ROLE\n\n\nCluster\n\n\n\n\n\n\n\n\n0\n104641.6\n4.0\n47.8\n0.5\n\n\n1\n149513.9\n6.9\n20.9\n0.2\n\n\n2\n86715.1\n2.7\n19.7\n1.0\n\n\n3\n92997.1\n2.4\n17.7\n0.0\n\n\n\n\n\n\n\n\nRegression model: 1. Model goals and features The goal of this regression model is to predict job salary based on structural features and analyze the direction and strength of the influence of features on this result. The selected features are: job name, industry (NAICS classification), state, number of skills required, whether it is a remote position, and whether it is an AI-related position.\n\nModel conclusions and insights The model results show that AI-related jobs generally pay higher salaries than non-AI jobs, and remote job opportunities and jobs located in high-technology areas often offer more competitive salaries. In addition, higher skill demand for jobs generally leads to higher wages, but this growth effect tends to weaken after a certain amount of skill increases.\nAdvice for job seekers For job seekers looking for a high salary, they can prioritize AI-related positions, or cross positions, and focus on improving machine learning, AWS and other related skills; You can also focus on remote jobs and businesses in other high-paying locations.\n\nClassification model 1. Model goals and features The goal of this classification model is to divide the data sample into two or more categories, predict the category through the input features, and predict whether the job belongs to the ai field. The selected features include keywords in the job title, industry code (NAICS), number of skills required, whether or not to work remotely, and location of Posting.\n\nModel conclusions and insights We constructed two classification models to predict post outcomes, Model two introduced additional features and performed well. The overall precision of the model is improved to 69%, and the recall for AI roles is increased from 0.39 to 0.45. However, the F1 score is still 0.52, and the class imbalance problem still exists.\nAdvice for job seekers For job seekers interested in entering the field of AI, it is recommended to use relevant job titles in the field of AI on their resumes and focus on skills related to machine learning and cloud computing. In addition, knowing which job titles and keywords are closely related to AI can also help them more accurately screen job postings and optimize their job search strategy."
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Job Market Analysis 2024",
    "section": "",
    "text": "Exploratory Data Analysis & Visualization\n\nimport pandas as pd\n%pip install kaleido\nimport kaleido\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndf = pd.read_csv(\"lightcast_job_postings.csv\")\nprint(df.columns.tolist())\n\nRequirement already satisfied: kaleido in ./venv/lib/python3.12/site-packages (0.2.1)\nNote: you may need to restart the kernel to use updated packages.\n['ID', 'LAST_UPDATED_DATE', 'LAST_UPDATED_TIMESTAMP', 'DUPLICATES', 'POSTED', 'EXPIRED', 'DURATION', 'SOURCE_TYPES', 'SOURCES', 'URL', 'ACTIVE_URLS', 'ACTIVE_SOURCES_INFO', 'TITLE_RAW', 'BODY', 'MODELED_EXPIRED', 'MODELED_DURATION', 'COMPANY', 'COMPANY_NAME', 'COMPANY_RAW', 'COMPANY_IS_STAFFING', 'EDUCATION_LEVELS', 'EDUCATION_LEVELS_NAME', 'MIN_EDULEVELS', 'MIN_EDULEVELS_NAME', 'MAX_EDULEVELS', 'MAX_EDULEVELS_NAME', 'EMPLOYMENT_TYPE', 'EMPLOYMENT_TYPE_NAME', 'MIN_YEARS_EXPERIENCE', 'MAX_YEARS_EXPERIENCE', 'IS_INTERNSHIP', 'SALARY', 'REMOTE_TYPE', 'REMOTE_TYPE_NAME', 'ORIGINAL_PAY_PERIOD', 'SALARY_TO', 'SALARY_FROM', 'LOCATION', 'CITY', 'CITY_NAME', 'COUNTY', 'COUNTY_NAME', 'MSA', 'MSA_NAME', 'STATE', 'STATE_NAME', 'COUNTY_OUTGOING', 'COUNTY_NAME_OUTGOING', 'COUNTY_INCOMING', 'COUNTY_NAME_INCOMING', 'MSA_OUTGOING', 'MSA_NAME_OUTGOING', 'MSA_INCOMING', 'MSA_NAME_INCOMING', 'NAICS2', 'NAICS2_NAME', 'NAICS3', 'NAICS3_NAME', 'NAICS4', 'NAICS4_NAME', 'NAICS5', 'NAICS5_NAME', 'NAICS6', 'NAICS6_NAME', 'TITLE', 'TITLE_NAME', 'TITLE_CLEAN', 'SKILLS', 'SKILLS_NAME', 'SPECIALIZED_SKILLS', 'SPECIALIZED_SKILLS_NAME', 'CERTIFICATIONS', 'CERTIFICATIONS_NAME', 'COMMON_SKILLS', 'COMMON_SKILLS_NAME', 'SOFTWARE_SKILLS', 'SOFTWARE_SKILLS_NAME', 'ONET', 'ONET_NAME', 'ONET_2019', 'ONET_2019_NAME', 'CIP6', 'CIP6_NAME', 'CIP4', 'CIP4_NAME', 'CIP2', 'CIP2_NAME', 'SOC_2021_2', 'SOC_2021_2_NAME', 'SOC_2021_3', 'SOC_2021_3_NAME', 'SOC_2021_4', 'SOC_2021_4_NAME', 'SOC_2021_5', 'SOC_2021_5_NAME', 'LOT_CAREER_AREA', 'LOT_CAREER_AREA_NAME', 'LOT_OCCUPATION', 'LOT_OCCUPATION_NAME', 'LOT_SPECIALIZED_OCCUPATION', 'LOT_SPECIALIZED_OCCUPATION_NAME', 'LOT_OCCUPATION_GROUP', 'LOT_OCCUPATION_GROUP_NAME', 'LOT_V6_SPECIALIZED_OCCUPATION', 'LOT_V6_SPECIALIZED_OCCUPATION_NAME', 'LOT_V6_OCCUPATION', 'LOT_V6_OCCUPATION_NAME', 'LOT_V6_OCCUPATION_GROUP', 'LOT_V6_OCCUPATION_GROUP_NAME', 'LOT_V6_CAREER_AREA', 'LOT_V6_CAREER_AREA_NAME', 'SOC_2', 'SOC_2_NAME', 'SOC_3', 'SOC_3_NAME', 'SOC_4', 'SOC_4_NAME', 'SOC_5', 'SOC_5_NAME', 'LIGHTCAST_SECTORS', 'LIGHTCAST_SECTORS_NAME', 'NAICS_2022_2', 'NAICS_2022_2_NAME', 'NAICS_2022_3', 'NAICS_2022_3_NAME', 'NAICS_2022_4', 'NAICS_2022_4_NAME', 'NAICS_2022_5', 'NAICS_2022_5_NAME', 'NAICS_2022_6', 'NAICS_2022_6_NAME']\n\n\n\nimport pandas as pd\ndf = pd.read_csv(\"lightcast_job_postings.csv\")\ndf.info()\ndf.head()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 72476 entries, 0 to 72475\nColumns: 131 entries, ID to NAICS_2022_6_NAME\ndtypes: bool(2), float64(11), int64(27), object(91)\nmemory usage: 71.5+ MB\n\n\n\n\n\n\n\n\n\n\nID\nLAST_UPDATED_DATE\nLAST_UPDATED_TIMESTAMP\nDUPLICATES\nPOSTED\nEXPIRED\nDURATION\nSOURCE_TYPES\nSOURCES\nURL\n...\nNAICS_2022_2\nNAICS_2022_2_NAME\nNAICS_2022_3\nNAICS_2022_3_NAME\nNAICS_2022_4\nNAICS_2022_4_NAME\nNAICS_2022_5\nNAICS_2022_5_NAME\nNAICS_2022_6\nNAICS_2022_6_NAME\n\n\n\n\n0\n1f57d95acf4dc67ed2819eb12f049f6a5c11782c\n2024-09-06\n2024-09-06 20:32:57.352 Z\n0\n2024-06-02\n2024-06-08\n6.0\n[\\n \"Company\"\\n]\n[\\n \"brassring.com\"\\n]\n[\\n \"https://sjobs.brassring.com/TGnewUI/Sear...\n...\n44\nRetail Trade\n441\nMotor Vehicle and Parts Dealers\n4413\nAutomotive Parts, Accessories, and Tire Retailers\n44133\nAutomotive Parts and Accessories Retailers\n441330\nAutomotive Parts and Accessories Retailers\n\n\n1\n0cb072af26757b6c4ea9464472a50a443af681ac\n2024-08-02\n2024-08-02 17:08:58.838 Z\n0\n2024-06-02\n2024-08-01\nNaN\n[\\n \"Job Board\"\\n]\n[\\n \"maine.gov\"\\n]\n[\\n \"https://joblink.maine.gov/jobs/1085740\"\\n]\n...\n56\nAdministrative and Support and Waste Managemen...\n561\nAdministrative and Support Services\n5613\nEmployment Services\n56132\nTemporary Help Services\n561320\nTemporary Help Services\n\n\n2\n85318b12b3331fa490d32ad014379df01855c557\n2024-09-06\n2024-09-06 20:32:57.352 Z\n1\n2024-06-02\n2024-07-07\n35.0\n[\\n \"Job Board\"\\n]\n[\\n \"dejobs.org\"\\n]\n[\\n \"https://dejobs.org/dallas-tx/data-analys...\n...\n52\nFinance and Insurance\n524\nInsurance Carriers and Related Activities\n5242\nAgencies, Brokerages, and Other Insurance Rela...\n52429\nOther Insurance Related Activities\n524291\nClaims Adjusting\n\n\n3\n1b5c3941e54a1889ef4f8ae55b401a550708a310\n2024-09-06\n2024-09-06 20:32:57.352 Z\n1\n2024-06-02\n2024-07-20\n48.0\n[\\n \"Job Board\"\\n]\n[\\n \"disabledperson.com\",\\n \"dejobs.org\"\\n]\n[\\n \"https://www.disabledperson.com/jobs/5948...\n...\n52\nFinance and Insurance\n522\nCredit Intermediation and Related Activities\n5221\nDepository Credit Intermediation\n52211\nCommercial Banking\n522110\nCommercial Banking\n\n\n4\ncb5ca25f02bdf25c13edfede7931508bfd9e858f\n2024-06-19\n2024-06-19 07:00:00.000 Z\n0\n2024-06-02\n2024-06-17\n15.0\n[\\n \"FreeJobBoard\"\\n]\n[\\n \"craigslist.org\"\\n]\n[\\n \"https://modesto.craigslist.org/sls/77475...\n...\n99\nUnclassified Industry\n999\nUnclassified Industry\n9999\nUnclassified Industry\n99999\nUnclassified Industry\n999999\nUnclassified Industry\n\n\n\n\n5 rows × 131 columns\n\n\n\n\n\nplt.figure(figsize=(12, 6))\nsns.boxplot(x=\"NAICS2_NAME\", y=\"SALARY_TO\", data=df)\nplt.title(\"Salary Distribution by Industry\", fontsize=14)\nplt.xlabel(\"Industry\", fontsize=12)\nplt.ylabel(\"Salary (Max)\", fontsize=12)\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\n\nimport plotly.io as pio\npio.templates.default = 'plotly_white'\n\n\nimport plotly.express as px\n\nfig_box = px.box(df, y='SALARY', points='all', title='Salary Distribution Box Plot')\nfig_box.write_image(\"figures/salary_box.png\")\nfig_box.show()\n\nfig_hist = px.histogram(df, x='SALARY', nbins=50, title='Salary Distribution Histogram')\nfig_hist.write_image(\"figures/salary_histogram.png\")\nfig_hist.show()\n\n        \n        \n        \n\n\n                            \n                                            \n\n\n                            \n                                            \n\n\n\ntop_industries = df['NAICS2_NAME'].value_counts().nlargest(20)\n\nfig_ind = px.bar(top_industries,\n                 x=top_industries.index, y=top_industries.values,\n                 labels={'x': 'NAICS2_NAME', 'y': 'Number of Postings'},\n                 title='Top 20 Industries with Most Job Postings')\nfig_ind.update_layout(xaxis_tickangle=-45)\nfig_ind.write_image(\"figures/top_industries.png\")\nfig_ind.show()\n\n                            \n                                            \n\n\n\nimport plotly.express as px\n\ndf['REMOTE_TYPE_NAME'] = df['REMOTE_TYPE_NAME'].fillna('On-Site')\n\nremote_counts = df['REMOTE_TYPE_NAME'].value_counts().reset_index()\nremote_counts.columns = ['Remote Type', 'Count']\n\nfig_remote = px.bar(\n    remote_counts,\n    x='Count',\n    y='Remote Type',\n    orientation='h',\n    title='Remote Work Type Distribution',\n    text='Count',\n    color='Remote Type',\n    color_discrete_sequence=px.colors.qualitative.Pastel\n)\n\nfig_remote.update_layout(\n    template='plotly_white',\n    xaxis_title='Count',\n    yaxis_title='Remote Type',\n    font=dict(family='Roboto', size=14)\n)\n\nfig_remote.write_image(\"figures/remote_bar.png\")\n\nfig_remote.show()\n\n                            \n                                            \n\n\n\nselected_columns = df[['TITLE', 'SALARY', 'SALARY_FROM', 'SALARY_TO', 'SKILLS']]\nprint(selected_columns.head())\nselected_columns.to_csv('Extracted_data.csv', index=False)\n\n                TITLE   SALARY  SALARY_FROM  SALARY_TO  \\\n0  ET29C073C03D1F86B4      NaN          NaN        NaN   \n1  ET21DDA63780A7DC09      NaN          NaN        NaN   \n2  ET3037E0C947A02404      NaN          NaN        NaN   \n3  ET2114E0404BA30075      NaN          NaN        NaN   \n4  ET0000000000000000  92500.0      35000.0   150000.0   \n\n                                              SKILLS  \n0  [\\n  \"KS126DB6T061MHD7RTGQ\",\\n  \"KS126706DPFD3...  \n1  [\\n  \"KS122626T550SLQ7QZ1C\",\\n  \"KS123YJ6KVWC9...  \n2  [\\n  \"KS1218W78FGVPVP2KXPX\",\\n  \"ESF3939CE1F80...  \n3  [\\n  \"KS123QX62QYTC4JF38H8\",\\n  \"KS7G6NP6R6L1H...  \n4                                                 []  \n\n\n\nmissing_values = df.isnull().sum()\n\nmissing_percentage = (missing_values / len(df)) * 100\n\nmissing_data = pd.DataFrame({\"Missing Values\": missing_values, \"Percentage\": missing_percentage})\nmissing_data = missing_data[missing_data[\"Missing Values\"] &gt; 0]\n\nmissing_data = missing_data.sort_values(by=\"Percentage\", ascending=False)\n\n\nsalary_median = df[\"SALARY\"].median()\n\ndf[\"SALARY\"].fillna(salary_median, inplace=True)\n\nprint(\"Missing values in SALARY after filling:\", df[\"SALARY\"].isnull().sum())\n\ndate_columns = [\"LAST_UPDATED_DATE\", \"LAST_UPDATED_TIMESTAMP\", \"POSTED\", \"EXPIRED\"]\n\nfor col in date_columns:\n    if col in df.columns:\n        df[col] = pd.to_datetime(df[col], errors=\"coerce\", utc=True)\n\nprint(df[[\"LAST_UPDATED_DATE\", \"LAST_UPDATED_TIMESTAMP\", \"POSTED\", \"EXPIRED\"]].head(10))\n\nMissing values in SALARY after filling: 0\n          LAST_UPDATED_DATE           LAST_UPDATED_TIMESTAMP  \\\n0 2024-09-06 00:00:00+00:00 2024-09-06 20:32:57.352000+00:00   \n1 2024-08-02 00:00:00+00:00 2024-08-02 17:08:58.838000+00:00   \n2 2024-09-06 00:00:00+00:00 2024-09-06 20:32:57.352000+00:00   \n3 2024-09-06 00:00:00+00:00 2024-09-06 20:32:57.352000+00:00   \n4 2024-06-19 00:00:00+00:00        2024-06-19 07:00:00+00:00   \n5 2024-09-06 00:00:00+00:00 2024-09-06 20:32:57.352000+00:00   \n6 2024-08-02 00:00:00+00:00 2024-08-02 17:08:58.838000+00:00   \n7 2024-09-06 00:00:00+00:00 2024-09-06 20:32:57.352000+00:00   \n8 2024-06-21 00:00:00+00:00        2024-06-21 07:00:00+00:00   \n9 2024-10-09 00:00:00+00:00 2024-10-09 18:07:44.758000+00:00   \n\n                     POSTED                   EXPIRED  \n0 2024-06-02 00:00:00+00:00 2024-06-08 00:00:00+00:00  \n1 2024-06-02 00:00:00+00:00 2024-08-01 00:00:00+00:00  \n2 2024-06-02 00:00:00+00:00 2024-07-07 00:00:00+00:00  \n3 2024-06-02 00:00:00+00:00 2024-07-20 00:00:00+00:00  \n4 2024-06-02 00:00:00+00:00 2024-06-17 00:00:00+00:00  \n5 2024-06-02 00:00:00+00:00 2024-06-12 00:00:00+00:00  \n6 2024-06-02 00:00:00+00:00 2024-08-01 00:00:00+00:00  \n7 2024-06-02 00:00:00+00:00 2024-07-07 00:00:00+00:00  \n8 2024-06-02 00:00:00+00:00 2024-06-20 00:00:00+00:00  \n9 2024-06-02 00:00:00+00:00 2024-08-01 00:00:00+00:00  \n\n\n/tmp/ipykernel_5569/1708947608.py:13: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Generate sample data (simulating original dataset)\ndata = {\n    \"STATE_NAME\": [\"California\", \"Texas\", \"New York\", \"Florida\", \"Illinois\"],\n    \"JOB_POSTINGS\": [12000, 9500, 8700, 7500, 6700],\n    \"REMOTE_JOBS\": [4500, 3800, 3200, 2900, 2500],\n    \"SALARY_FROM\": [60000, 55000, 58000, 53000, 52000],\n    \"SALARY_TO\": [120000, 110000, 115000, 105000, 100000],\n    \"INDUSTRY\": [\"Tech\", \"Finance\", \"Healthcare\", \"Retail\", \"Manufacturing\"]\n}\n\ndf = pd.DataFrame(data)\n\n# Set Seaborn theme\nsns.set_theme(style=\"whitegrid\")\n\n# 1. Job Posting Trends (Bar Chart)\nplt.figure(figsize=(10, 6))\nsns.barplot(x=\"STATE_NAME\", y=\"JOB_POSTINGS\", data=df)\nplt.title(\"Job Posting Trends by State\")\nplt.xlabel(\"State\")\nplt.ylabel(\"Number of Job Postings\")\nplt.xticks(rotation=45)\nplt.legend(title=\"Industry\")\n\nplt.tight_layout()\nplt.savefig(\"figures/job_postings_by_state.png\")\nplt.show()\n\n/tmp/ipykernel_5569/2049104866.py:27: UserWarning:\n\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Read dataset from local file\nfile_path = \"lightcast_job_postings.csv\"\ndf = pd.read_csv(file_path)\n\n# Inspect the first few rows to verify the data structure\nprint(df.head())\n\n# Set Seaborn theme\nsns.set_theme(style=\"whitegrid\")\n\n# 1. Job Posting Trends (Bar Chart)\nplt.figure(figsize=(10, 6))\nsns.barplot(x=\"STATE_NAME\", y=\"POSTED\", data=df)\nplt.title(\"Job Posting Trends by State\")\nplt.xlabel(\"State\")\nplt.ylabel(\"Number of Job Postings\")\nplt.xticks(rotation=45)\nplt.legend(title=\"Industry\")\nplt.savefig(\"figures/job_posting_trends_state_industry.png\", dpi=300, bbox_inches=\"tight\")\n\nplt.show()\n\n                                         ID LAST_UPDATED_DATE  \\\n0  1f57d95acf4dc67ed2819eb12f049f6a5c11782c        2024-09-06   \n1  0cb072af26757b6c4ea9464472a50a443af681ac        2024-08-02   \n2  85318b12b3331fa490d32ad014379df01855c557        2024-09-06   \n3  1b5c3941e54a1889ef4f8ae55b401a550708a310        2024-09-06   \n4  cb5ca25f02bdf25c13edfede7931508bfd9e858f        2024-06-19   \n\n      LAST_UPDATED_TIMESTAMP  DUPLICATES      POSTED     EXPIRED  DURATION  \\\n0  2024-09-06 20:32:57.352 Z           0  2024-06-02  2024-06-08       6.0   \n1  2024-08-02 17:08:58.838 Z           0  2024-06-02  2024-08-01       NaN   \n2  2024-09-06 20:32:57.352 Z           1  2024-06-02  2024-07-07      35.0   \n3  2024-09-06 20:32:57.352 Z           1  2024-06-02  2024-07-20      48.0   \n4  2024-06-19 07:00:00.000 Z           0  2024-06-02  2024-06-17      15.0   \n\n             SOURCE_TYPES                                        SOURCES  \\\n0       [\\n  \"Company\"\\n]                        [\\n  \"brassring.com\"\\n]   \n1     [\\n  \"Job Board\"\\n]                            [\\n  \"maine.gov\"\\n]   \n2     [\\n  \"Job Board\"\\n]                           [\\n  \"dejobs.org\"\\n]   \n3     [\\n  \"Job Board\"\\n]  [\\n  \"disabledperson.com\",\\n  \"dejobs.org\"\\n]   \n4  [\\n  \"FreeJobBoard\"\\n]                       [\\n  \"craigslist.org\"\\n]   \n\n                                                 URL  ... NAICS_2022_2  \\\n0  [\\n  \"https://sjobs.brassring.com/TGnewUI/Sear...  ...           44   \n1   [\\n  \"https://joblink.maine.gov/jobs/1085740\"\\n]  ...           56   \n2  [\\n  \"https://dejobs.org/dallas-tx/data-analys...  ...           52   \n3  [\\n  \"https://www.disabledperson.com/jobs/5948...  ...           52   \n4  [\\n  \"https://modesto.craigslist.org/sls/77475...  ...           99   \n\n                                   NAICS_2022_2_NAME NAICS_2022_3  \\\n0                                       Retail Trade          441   \n1  Administrative and Support and Waste Managemen...          561   \n2                              Finance and Insurance          524   \n3                              Finance and Insurance          522   \n4                              Unclassified Industry          999   \n\n                              NAICS_2022_3_NAME NAICS_2022_4  \\\n0               Motor Vehicle and Parts Dealers         4413   \n1           Administrative and Support Services         5613   \n2     Insurance Carriers and Related Activities         5242   \n3  Credit Intermediation and Related Activities         5221   \n4                         Unclassified Industry         9999   \n\n                                   NAICS_2022_4_NAME  NAICS_2022_5  \\\n0  Automotive Parts, Accessories, and Tire Retailers         44133   \n1                                Employment Services         56132   \n2  Agencies, Brokerages, and Other Insurance Rela...         52429   \n3                   Depository Credit Intermediation         52211   \n4                              Unclassified Industry         99999   \n\n                            NAICS_2022_5_NAME NAICS_2022_6  \\\n0  Automotive Parts and Accessories Retailers       441330   \n1                     Temporary Help Services       561320   \n2          Other Insurance Related Activities       524291   \n3                          Commercial Banking       522110   \n4                       Unclassified Industry       999999   \n\n                            NAICS_2022_6_NAME  \n0  Automotive Parts and Accessories Retailers  \n1                     Temporary Help Services  \n2                            Claims Adjusting  \n3                          Commercial Banking  \n4                       Unclassified Industry  \n\n[5 rows x 131 columns]\n\n\n/tmp/ipykernel_5569/1025947822.py:22: UserWarning:\n\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n\n\n\n\n\n\n\n\n\n\n\nstate_job_counts = df.groupby(\"STATE_NAME\")[\"TITLE_NAME\"].count().reset_index()\nstate_job_counts = state_job_counts.sort_values(by=\"TITLE_NAME\", ascending=False)\n\nsns.set_theme(style=\"whitegrid\")\n\nplt.figure(figsize=(12, 6))\nsns.barplot(x=\"STATE_NAME\", y=\"TITLE_NAME\", data=state_job_counts, palette=\"viridis\")\n\nplt.title(\"Job Posting Trends by State\", fontsize=14)\nplt.xlabel(\"State\", fontsize=12)\nplt.ylabel(\"Number of Job Postings\", fontsize=12)\nplt.xticks(rotation=45)\nplt.savefig(\"figures/job_postings_by_state_all.png\", dpi=300, bbox_inches=\"tight\")\n\nplt.show()\n\n/tmp/ipykernel_5569/2397595810.py:7: FutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n\n\n\n\n\n\n\n\n\n\n\nstate_job_counts = df.groupby(\"STATE_NAME\")[\"TITLE_NAME\"].count().reset_index()\nstate_job_counts = state_job_counts.sort_values(by=\"TITLE_NAME\", ascending=False).head(10)\nsns.set_theme(style=\"whitegrid\")\n\nplt.figure(figsize=(12, 6))\nsns.barplot(x=\"STATE_NAME\", y=\"TITLE_NAME\", data=state_job_counts, palette=\"viridis\")\n\nplt.title(\"Top 10 States with Highest Job Postings\", fontsize=14)\nplt.xlabel(\"State\", fontsize=12)\nplt.ylabel(\"Number of Job Postings\", fontsize=12)\nplt.xticks(rotation=45)\nplt.savefig(\"figures/top10_states_job_postings.png\", dpi=300, bbox_inches=\"tight\")\n\nplt.show()\n\n/tmp/ipykernel_5569/3912261207.py:6: FutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n\n\n\n\n\n\n\n\n\n\n\nindustry_job_counts = df.groupby(\"NAICS2_NAME\")[\"TITLE_NAME\"].count().reset_index()\nindustry_job_counts = industry_job_counts.sort_values(by=\"TITLE_NAME\", ascending=False).head(10)\n\nplt.figure(figsize=(12, 6))\nsns.barplot(x=\"NAICS2_NAME\", y=\"TITLE_NAME\", data=industry_job_counts, palette=\"coolwarm\")\n\nplt.title(\"Top 10 Industries with Highest Job Postings\", fontsize=14)\nplt.xlabel(\"Industry\", fontsize=12)\nplt.ylabel(\"Number of Job Postings\", fontsize=12)\nplt.xticks(rotation=45)\nplt.savefig(\"figures/top10_industries_job_postings.png\", dpi=300, bbox_inches=\"tight\")\n\nplt.show()\n\n/tmp/ipykernel_5569/3076410858.py:5: FutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n\n\n\n\n\n\n\n\n\n\n\nplt.figure(figsize=(12, 6))\nsns.boxplot(x=\"NAICS2_NAME\", y=\"SALARY_TO\", data=df)\nplt.title(\"Salary Distribution by Industry\", fontsize=14)\nplt.xlabel(\"Industry\", fontsize=12)\nplt.ylabel(\"Salary (Max)\", fontsize=12)\nplt.xticks(rotation=45)\nplt.savefig(\"figures/salary_boxplot_by_industry.png\", dpi=300, bbox_inches=\"tight\")\n\nplt.show()\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\nif \"EMPLOYMENT_TYPE_NAME\" in df.columns:\n    employment_counts = df[\"EMPLOYMENT_TYPE_NAME\"].value_counts().reset_index()\n    employment_counts.columns = [\"Employment Type\", \"Count\"]\n\n    plt.figure(figsize=(8, 6))\n    sns.barplot(data=employment_counts, y=\"Employment Type\", x=\"Count\", palette=\"pastel\")\n\n    plt.title(\"Employment Type Distribution\", fontsize=14)\n    plt.xlabel(\"Count\")\n    plt.ylabel(\"Employment Type\")\n    plt.tight_layout()\n\n    \n    plt.savefig(\"figures/employment_type_bar_chart.png\", dpi=300, bbox_inches=\"tight\")\n\n    plt.show()\nelse:\n    print(\"Error: Column 'EMPLOYMENT_TYPE_NAME' not found in the dataset.\")\n\n/tmp/ipykernel_5569/1850346560.py:10: FutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n\n\n\n\n\n\n\n\n\n\n\n\nimport plotly.express as px\nimport pandas as pd\n\nfile_path = \"lightcast_job_postings.csv\"\ndf = pd.read_csv(file_path)\ncity_counts = df['CITY_NAME'].value_counts().reset_index()\ncity_counts.columns = ['CITY_NAME', 'Job Count']\n\n\nfig = px.scatter_geo(city_counts,\n                     locations=\"CITY_NAME\",\n                     locationmode=\"USA-states\",\n                     size=\"Job Count\",\n                     title=\"Job Postings Distribution Across Cities\",\n                     projection=\"natural earth\")\nfig.write_image(\"figures/job_postings_map.png\", scale=2)\n\nfig.show()\n\n                            \n                                            \n\n\n\nimport plotly.express as px\n\ndf_salary = df[(df['SALARY_FROM'] &gt; 0) & (df['SALARY_TO'] &gt; 0)]\n\nfig = px.histogram(df_salary, x=\"SALARY_FROM\", nbins=50, title=\"Interactive Salary Distribution\",\n                   labels={\"SALARY_FROM\": \"Salary Lower Bound\"},\n                   color_discrete_sequence=[\"blue\"])\nfig.update_layout(xaxis_title=\"Salary\", yaxis_title=\"Frequency\", dragmode=\"pan\")\nfig.write_image(\"figures/salary_distribution_histogram.png\", scale=2)\n\nfig.show()\n\n                            \n                                            \n\n\n\n!pip install streamlit\nimport streamlit as st\nimport pandas as pd\nimport plotly.express as px\n\n\nst.title(\"Job Market Analysis\")\n\njob_title = st.selectbox(\"Select a Job Title\", df['TITLE_NAME'].unique())\n\nfiltered_df = df[df['TITLE_NAME'] == job_title]\n\nfig = px.histogram(filtered_df, x=\"SALARY_FROM\", nbins=30, title=f\"Salary Distribution for {job_title}\")\nst.plotly_chart(fig)\n\nfig.write_image(f\"figures/salary_distribution_{job_title}.png\", scale=2)\n\nRequirement already satisfied: streamlit in ./venv/lib/python3.12/site-packages (1.45.0)\nRequirement already satisfied: altair&lt;6,&gt;=4.0 in ./venv/lib/python3.12/site-packages (from streamlit) (5.5.0)\nRequirement already satisfied: blinker&lt;2,&gt;=1.5.0 in ./venv/lib/python3.12/site-packages (from streamlit) (1.9.0)\nRequirement already satisfied: cachetools&lt;6,&gt;=4.0 in ./venv/lib/python3.12/site-packages (from streamlit) (5.5.2)\nRequirement already satisfied: click&lt;9,&gt;=7.0 in ./venv/lib/python3.12/site-packages (from streamlit) (8.1.8)\nRequirement already satisfied: numpy&lt;3,&gt;=1.23 in ./venv/lib/python3.12/site-packages (from streamlit) (2.2.5)\nRequirement already satisfied: packaging&lt;25,&gt;=20 in ./venv/lib/python3.12/site-packages (from streamlit) (24.2)\nRequirement already satisfied: pandas&lt;3,&gt;=1.4.0 in ./venv/lib/python3.12/site-packages (from streamlit) (2.2.3)\nRequirement already satisfied: pillow&lt;12,&gt;=7.1.0 in ./venv/lib/python3.12/site-packages (from streamlit) (11.2.1)\nRequirement already satisfied: protobuf&lt;7,&gt;=3.20 in ./venv/lib/python3.12/site-packages (from streamlit) (6.30.2)\nRequirement already satisfied: pyarrow&gt;=7.0 in ./venv/lib/python3.12/site-packages (from streamlit) (20.0.0)\nRequirement already satisfied: requests&lt;3,&gt;=2.27 in ./venv/lib/python3.12/site-packages (from streamlit) (2.32.3)\nRequirement already satisfied: tenacity&lt;10,&gt;=8.1.0 in ./venv/lib/python3.12/site-packages (from streamlit) (9.1.2)\nRequirement already satisfied: toml&lt;2,&gt;=0.10.1 in ./venv/lib/python3.12/site-packages (from streamlit) (0.10.2)\nRequirement already satisfied: typing-extensions&lt;5,&gt;=4.4.0 in ./venv/lib/python3.12/site-packages (from streamlit) (4.13.2)\nRequirement already satisfied: watchdog&lt;7,&gt;=2.1.5 in ./venv/lib/python3.12/site-packages (from streamlit) (6.0.0)\nRequirement already satisfied: gitpython!=3.1.19,&lt;4,&gt;=3.0.7 in ./venv/lib/python3.12/site-packages (from streamlit) (3.1.44)\nRequirement already satisfied: pydeck&lt;1,&gt;=0.8.0b4 in ./venv/lib/python3.12/site-packages (from streamlit) (0.9.1)\nRequirement already satisfied: tornado&lt;7,&gt;=6.0.3 in ./venv/lib/python3.12/site-packages (from streamlit) (6.4.2)\nRequirement already satisfied: jinja2 in ./venv/lib/python3.12/site-packages (from altair&lt;6,&gt;=4.0-&gt;streamlit) (3.1.6)\nRequirement already satisfied: jsonschema&gt;=3.0 in ./venv/lib/python3.12/site-packages (from altair&lt;6,&gt;=4.0-&gt;streamlit) (4.23.0)\nRequirement already satisfied: narwhals&gt;=1.14.2 in ./venv/lib/python3.12/site-packages (from altair&lt;6,&gt;=4.0-&gt;streamlit) (1.37.1)\nRequirement already satisfied: gitdb&lt;5,&gt;=4.0.1 in ./venv/lib/python3.12/site-packages (from gitpython!=3.1.19,&lt;4,&gt;=3.0.7-&gt;streamlit) (4.0.12)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in ./venv/lib/python3.12/site-packages (from pandas&lt;3,&gt;=1.4.0-&gt;streamlit) (2.9.0.post0)\nRequirement already satisfied: pytz&gt;=2020.1 in ./venv/lib/python3.12/site-packages (from pandas&lt;3,&gt;=1.4.0-&gt;streamlit) (2025.2)\nRequirement already satisfied: tzdata&gt;=2022.7 in ./venv/lib/python3.12/site-packages (from pandas&lt;3,&gt;=1.4.0-&gt;streamlit) (2025.2)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in ./venv/lib/python3.12/site-packages (from requests&lt;3,&gt;=2.27-&gt;streamlit) (3.4.2)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in ./venv/lib/python3.12/site-packages (from requests&lt;3,&gt;=2.27-&gt;streamlit) (3.10)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in ./venv/lib/python3.12/site-packages (from requests&lt;3,&gt;=2.27-&gt;streamlit) (2.4.0)\nRequirement already satisfied: certifi&gt;=2017.4.17 in ./venv/lib/python3.12/site-packages (from requests&lt;3,&gt;=2.27-&gt;streamlit) (2025.4.26)\nRequirement already satisfied: smmap&lt;6,&gt;=3.0.1 in ./venv/lib/python3.12/site-packages (from gitdb&lt;5,&gt;=4.0.1-&gt;gitpython!=3.1.19,&lt;4,&gt;=3.0.7-&gt;streamlit) (5.0.2)\nRequirement already satisfied: MarkupSafe&gt;=2.0 in ./venv/lib/python3.12/site-packages (from jinja2-&gt;altair&lt;6,&gt;=4.0-&gt;streamlit) (3.0.2)\nRequirement already satisfied: attrs&gt;=22.2.0 in ./venv/lib/python3.12/site-packages (from jsonschema&gt;=3.0-&gt;altair&lt;6,&gt;=4.0-&gt;streamlit) (25.3.0)\nRequirement already satisfied: jsonschema-specifications&gt;=2023.03.6 in ./venv/lib/python3.12/site-packages (from jsonschema&gt;=3.0-&gt;altair&lt;6,&gt;=4.0-&gt;streamlit) (2025.4.1)\nRequirement already satisfied: referencing&gt;=0.28.4 in ./venv/lib/python3.12/site-packages (from jsonschema&gt;=3.0-&gt;altair&lt;6,&gt;=4.0-&gt;streamlit) (0.36.2)\nRequirement already satisfied: rpds-py&gt;=0.7.1 in ./venv/lib/python3.12/site-packages (from jsonschema&gt;=3.0-&gt;altair&lt;6,&gt;=4.0-&gt;streamlit) (0.24.0)\nRequirement already satisfied: six&gt;=1.5 in ./venv/lib/python3.12/site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas&lt;3,&gt;=1.4.0-&gt;streamlit) (1.17.0)\n\n\n2025-05-02 20:28:09.173 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2025-05-02 20:28:09.382 \n  Warning: to view this Streamlit app on a browser, run it with the following\n  command:\n\n    streamlit run /home/stridsvagn122/ad688-employability-sp25A1-group5/venv/lib/python3.12/site-packages/ipykernel_launcher.py [ARGUMENTS]\n2025-05-02 20:28:09.384 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2025-05-02 20:28:09.393 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2025-05-02 20:28:09.394 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2025-05-02 20:28:09.400 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2025-05-02 20:28:09.404 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2025-05-02 20:28:09.405 Session state does not function when running a script without `streamlit run`\n2025-05-02 20:28:09.407 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2025-05-02 20:28:09.408 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2025-05-02 20:28:09.442 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2025-05-02 20:28:09.443 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2025-05-02 20:28:09.444 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n2025-05-02 20:28:09.445 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode."
  },
  {
    "objectID": "skill_gap_analysis.html",
    "href": "skill_gap_analysis.html",
    "title": "Job Market Analysis 2024",
    "section": "",
    "text": "!pip install pandas matplotlib seaborn\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nRequirement already satisfied: pandas in ./venv/lib/python3.12/site-packages (2.2.3)\nRequirement already satisfied: matplotlib in ./venv/lib/python3.12/site-packages (3.10.1)\nRequirement already satisfied: seaborn in ./venv/lib/python3.12/site-packages (0.13.2)\nRequirement already satisfied: numpy&gt;=1.26.0 in ./venv/lib/python3.12/site-packages (from pandas) (2.2.5)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in ./venv/lib/python3.12/site-packages (from pandas) (2.9.0.post0)\nRequirement already satisfied: pytz&gt;=2020.1 in ./venv/lib/python3.12/site-packages (from pandas) (2025.2)\nRequirement already satisfied: tzdata&gt;=2022.7 in ./venv/lib/python3.12/site-packages (from pandas) (2025.2)\nRequirement already satisfied: contourpy&gt;=1.0.1 in ./venv/lib/python3.12/site-packages (from matplotlib) (1.3.2)\nRequirement already satisfied: cycler&gt;=0.10 in ./venv/lib/python3.12/site-packages (from matplotlib) (0.12.1)\nRequirement already satisfied: fonttools&gt;=4.22.0 in ./venv/lib/python3.12/site-packages (from matplotlib) (4.57.0)\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in ./venv/lib/python3.12/site-packages (from matplotlib) (1.4.8)\nRequirement already satisfied: packaging&gt;=20.0 in ./venv/lib/python3.12/site-packages (from matplotlib) (24.2)\nRequirement already satisfied: pillow&gt;=8 in ./venv/lib/python3.12/site-packages (from matplotlib) (11.2.1)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in ./venv/lib/python3.12/site-packages (from matplotlib) (3.2.3)\nRequirement already satisfied: six&gt;=1.5 in ./venv/lib/python3.12/site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas) (1.17.0)\n\n\n\nskills_data = {\n    \"Name\": [\"Chao Huang\", \"Mulai Jiang\", \"Liyang Zhou\", \"Yutong Qian\"],\n    \"Python\": [4, 4, 4, 4],\n    \"SQL\": [2, 3, 3, 2],\n    \"R\": [4, 5, 3, 4],\n    \"Tableau\": [1, 5, 5, 3]\n}\n\n\ndf_skills = pd.DataFrame(skills_data)\ndf_skills.set_index(\"Name\", inplace=True)\nprint(df_skills)\n\n             Python  SQL  R  Tableau\nName                                \nChao Huang        4    2  4        1\nMulai Jiang       4    3  5        5\nLiyang Zhou       4    3  3        5\nYutong Qian       4    2  4        3\n\n\n\nplt.figure(figsize=(8, 6))\nsns.heatmap(df_skills, annot=True, cmap=\"coolwarm\", linewidths=0.5)\nplt.title(\"Team Skill Levels Heatmap\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfrom collections import Counter\n\njob_skill_counts = Counter({\n    \"Python\": 120,\n    \"SQL\": 95,\n    \"R\": 60,\n    \"Tableau\": 80,\n    \"AWS\": 100,\n    \"Docker\": 75\n})\n\n\ntop_skills = list(job_skill_counts.keys())\nfor skill in top_skills:\n    if skill not in df_skills.columns:\n        df_skills[skill] = 0\nprint(df_skills)\n\n             Python  SQL  R  Tableau  AWS  Docker\nName                                             \nChao Huang        4    2  4        1    0       0\nMulai Jiang       4    3  5        5    0       0\nLiyang Zhou       4    3  3        5    0       0\nYutong Qian       4    2  4        3    0       0\n\n\nRecommendations： Based on the skill gap analysis, our team is strong in Python and R, and shows advanced data visualization abilities, especially Tableau for two members. However, no one currently has experience with AWS or Docker, which are high-demand skills in the job market.\nIndividual Recommendations:\nChao Huang\nStrengths: Python, R Suggested improvements: Learn Tableau for dashboard building and storytelling. Begin AWS Cloud Fundamentals. Recommended Resources: Coursera: “AWS Cloud Practitioner Essentials” YouTube: “Tableau for Beginners – Full Course”\nMulai Jiang\nStrengths: Python, R, Tableau Suggested improvements: Improve SQL for better data querying. Learn Docker to understand DevOps workflows. Recommended Resources: Khan Academy / Mode Analytics SQL Track Udemy: “Docker & Kubernetes for Beginners”\nLiyang Zhou\nStrengths: Python, Tableau Suggested improvements: Deepen R usage for data analysis. Begin AWS for cloud deployment knowledge. Recommended Resources: edX: “Introduction to R for Data Science” AWS Skill Builder (free cloud labs)\nYutong Qian\nStrengths: Python, R Suggested improvements: Strengthen SQL skills. Learn Docker for pipeline and automation. Recommended Resources: DataCamp: “Intermediate SQL” Docker Official Docs (play with Docker playground) Team Collaboration Suggestions We recommend that the team hold regular weekly learning sessions on AWS and Docker to help all members build basic cloud computing. In terms of data analysis, SQL and R can be mastered through pair programming, with skilled members leading the overall improvement. As a practical project, we recommend that everyone work together to complete a dashboard system based on Tableau visualization and deployed through AWS, so that data visualization and cloud deployment capabilities can be exercised in real projects."
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "Introduction\nAI is completely disrupting various industries, and it makes us all wondering about what this will mean for jobs. Although some sectors are gaining more jobs due to AI automation, others are trimming staff. In the middle of all this, job seekers definitely need to get a grip on which jobs are emerging in the AI era and what they need to be training for.\nTherefore, to begin with, we need to look at the trends in the job market for AI jobs and normal jobs. This research is all about determining whether AI is indeed creating more jobs or simply eliminating the traditional ones, as well as which sectors are being boosted by it, and what qualifications are required for AI jobs versus the normal ones. AI will probably create new career paths while reconfiguring existing ones [@soueidan2024impact].By examining employment trends, pay comparisons, and skill demand, we want to offer some advice on how people can prepare for the evolving workforce."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Research Introduction: AI vs. Non-AI Careers",
    "section": "",
    "text": "AI is generating jobs and causing some effects in fields like healthcare, finance, and technology. In healthcare, they’re using AI to simplify diagnoses, discover new drugs, and tailor medicine to individuals, which is creating more demand for those familiar with AI in medicine (Medium, 2024). In finance, they’re using AI for fraud detection, risk assessment, and high-frequency trading, so there’s greater demand for data analysts and machine learning specialists too (Globalization Partners, 2024).\nAlthough AI has created many new positions in some fields, it’s also making individuals to lose their jobs in some industries based on the same old repetitive and manual work. These days retail and manufacturing businesses are losing traditional jobs since robots and automation, some of which uses AI, are doing the human work (Innopharma Education, 2024). And what about customer support roles? Well, they’re at risk too since AI chatbots and virtual assistants are responding to more and more customer inquiries. They are creating less need for human representatives (Nexford, 2024).\nAI jobs also get paid much more than average. If we look at fields like data science, AI engineering, and cloud computing, those professionals make a lot more than professionals like accounting, mechanical engineering, or retail. In addition, AI job postings are still increasing, especially in tech hubs like Silicon Valley, Boston, and Austin, where companies are especially willing to recruit AI talent (Globalization Partners, 2024).\nCompanies are indeed searching for AI professionals in areas like machine learning, cybersecurity, and automation. However, since there is a shortage of qualified AI professionals, those who have AI skills can command relatively decent salaries and perks. New industries like fintech and AI-driven healthcare are booming with job growth, which is a positive development for anyone who has AI-related skills (Medium, 2024)."
  },
  {
    "objectID": "data_analysis.html",
    "href": "data_analysis.html",
    "title": "Data Analysis",
    "section": "",
    "text": "!pip install pandas matplotlib missingno plotly seaborn\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport missingno as msno\nimport plotly.express as px\nimport seaborn as sns\n\ndf = pd.read_csv(\"lightcast_job_postings.csv\")\ndf.head()\n\nRequirement already satisfied: pandas in ./venv/lib/python3.12/site-packages (2.2.3)\nRequirement already satisfied: matplotlib in ./venv/lib/python3.12/site-packages (3.10.1)\nRequirement already satisfied: missingno in ./venv/lib/python3.12/site-packages (0.5.2)\nRequirement already satisfied: plotly in ./venv/lib/python3.12/site-packages (6.0.1)\nRequirement already satisfied: seaborn in ./venv/lib/python3.12/site-packages (0.13.2)\nRequirement already satisfied: numpy&gt;=1.26.0 in ./venv/lib/python3.12/site-packages (from pandas) (2.2.5)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in ./venv/lib/python3.12/site-packages (from pandas) (2.9.0.post0)\nRequirement already satisfied: pytz&gt;=2020.1 in ./venv/lib/python3.12/site-packages (from pandas) (2025.2)\nRequirement already satisfied: tzdata&gt;=2022.7 in ./venv/lib/python3.12/site-packages (from pandas) (2025.2)\nRequirement already satisfied: contourpy&gt;=1.0.1 in ./venv/lib/python3.12/site-packages (from matplotlib) (1.3.2)\nRequirement already satisfied: cycler&gt;=0.10 in ./venv/lib/python3.12/site-packages (from matplotlib) (0.12.1)\nRequirement already satisfied: fonttools&gt;=4.22.0 in ./venv/lib/python3.12/site-packages (from matplotlib) (4.57.0)\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in ./venv/lib/python3.12/site-packages (from matplotlib) (1.4.8)\nRequirement already satisfied: packaging&gt;=20.0 in ./venv/lib/python3.12/site-packages (from matplotlib) (24.2)\nRequirement already satisfied: pillow&gt;=8 in ./venv/lib/python3.12/site-packages (from matplotlib) (11.2.1)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in ./venv/lib/python3.12/site-packages (from matplotlib) (3.2.3)\nRequirement already satisfied: scipy in ./venv/lib/python3.12/site-packages (from missingno) (1.15.2)\nRequirement already satisfied: narwhals&gt;=1.15.1 in ./venv/lib/python3.12/site-packages (from plotly) (1.37.1)\nRequirement already satisfied: six&gt;=1.5 in ./venv/lib/python3.12/site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas) (1.17.0)\n\n\n\n\n\n\n\n\n\n\nID\nLAST_UPDATED_DATE\nLAST_UPDATED_TIMESTAMP\nDUPLICATES\nPOSTED\nEXPIRED\nDURATION\nSOURCE_TYPES\nSOURCES\nURL\n...\nNAICS_2022_2\nNAICS_2022_2_NAME\nNAICS_2022_3\nNAICS_2022_3_NAME\nNAICS_2022_4\nNAICS_2022_4_NAME\nNAICS_2022_5\nNAICS_2022_5_NAME\nNAICS_2022_6\nNAICS_2022_6_NAME\n\n\n\n\n0\n1f57d95acf4dc67ed2819eb12f049f6a5c11782c\n2024-09-06\n2024-09-06 20:32:57.352 Z\n0\n2024-06-02\n2024-06-08\n6.0\n[\\n \"Company\"\\n]\n[\\n \"brassring.com\"\\n]\n[\\n \"https://sjobs.brassring.com/TGnewUI/Sear...\n...\n44\nRetail Trade\n441\nMotor Vehicle and Parts Dealers\n4413\nAutomotive Parts, Accessories, and Tire Retailers\n44133\nAutomotive Parts and Accessories Retailers\n441330\nAutomotive Parts and Accessories Retailers\n\n\n1\n0cb072af26757b6c4ea9464472a50a443af681ac\n2024-08-02\n2024-08-02 17:08:58.838 Z\n0\n2024-06-02\n2024-08-01\nNaN\n[\\n \"Job Board\"\\n]\n[\\n \"maine.gov\"\\n]\n[\\n \"https://joblink.maine.gov/jobs/1085740\"\\n]\n...\n56\nAdministrative and Support and Waste Managemen...\n561\nAdministrative and Support Services\n5613\nEmployment Services\n56132\nTemporary Help Services\n561320\nTemporary Help Services\n\n\n2\n85318b12b3331fa490d32ad014379df01855c557\n2024-09-06\n2024-09-06 20:32:57.352 Z\n1\n2024-06-02\n2024-07-07\n35.0\n[\\n \"Job Board\"\\n]\n[\\n \"dejobs.org\"\\n]\n[\\n \"https://dejobs.org/dallas-tx/data-analys...\n...\n52\nFinance and Insurance\n524\nInsurance Carriers and Related Activities\n5242\nAgencies, Brokerages, and Other Insurance Rela...\n52429\nOther Insurance Related Activities\n524291\nClaims Adjusting\n\n\n3\n1b5c3941e54a1889ef4f8ae55b401a550708a310\n2024-09-06\n2024-09-06 20:32:57.352 Z\n1\n2024-06-02\n2024-07-20\n48.0\n[\\n \"Job Board\"\\n]\n[\\n \"disabledperson.com\",\\n \"dejobs.org\"\\n]\n[\\n \"https://www.disabledperson.com/jobs/5948...\n...\n52\nFinance and Insurance\n522\nCredit Intermediation and Related Activities\n5221\nDepository Credit Intermediation\n52211\nCommercial Banking\n522110\nCommercial Banking\n\n\n4\ncb5ca25f02bdf25c13edfede7931508bfd9e858f\n2024-06-19\n2024-06-19 07:00:00.000 Z\n0\n2024-06-02\n2024-06-17\n15.0\n[\\n \"FreeJobBoard\"\\n]\n[\\n \"craigslist.org\"\\n]\n[\\n \"https://modesto.craigslist.org/sls/77475...\n...\n99\nUnclassified Industry\n999\nUnclassified Industry\n9999\nUnclassified Industry\n99999\nUnclassified Industry\n999999\nUnclassified Industry\n\n\n\n\n5 rows × 131 columns\n\n\n\n\n\ncolumns_to_drop = [\n    \"ID\", \"URL\", \"ACTIVE_URLS\", \"DUPLICATES\", \"LAST_UPDATED_TIMESTAMP\",\n    \"NAICS_2022_2\", \"NAICS_2022_3\", \"NAICS_2022_4\", \"NAICS_2022_5\",\n    \"SOC_2\", \"SOC_3\", \"SOC_5\"\n]\ndf.drop(columns=columns_to_drop, inplace=True)\n\nIn this case, the following columns are considered irrelevant or redundant: ID, used only for uniquely identifying data rows; URL and ACTIVE_URLS, which contain webpage links with no analytical significance; DUPLICATES, used for internal deduplication; and LAST_UPDATED_TIMESTAMP, which only records data update times. Additionally, NAICS2 - NAICS6 include excessive industry classification codes that may cause redundancy, while SOC_2, SOC_3, and SOC_5 are detailed occupational classifications that do not impact the final analysis. As multiple versions of NAICS/SOC codes, it is important to remove several of them. Since different versions provide similar information but may include duplicates or slight variations, leading to data bloat. Besides, if we do not cancel them, it is possible that we use two different version to analysis. This may cause problem in deeper analysis. In order to improve the accuracy of analysis, we first deleted irrelevant columns to reduce irrelevant data and improve the efficiency of data cleaning. Then remove duplicate data to ensure that each recruitment information is unique to prevent data duplication. Replace categorical variables (such as Industry) with “Unknown” to maintain data integrity.\n\nmsno.heatmap(df)\nplt.title(\"Missing Values Heatmap\")\nplt.show()\n\ndf.dropna(thresh=len(df) * 0.5, axis=1, inplace=True)\n\nnumerical_columns = df.select_dtypes(include=['number']).columns\nfor col in numerical_columns:\n    df[col].fillna(df[col].median(), inplace=True)\ncategorical_columns = df.select_dtypes(include=['object']).columns\nfor col in categorical_columns:\n    df[col].fillna(\"Unknown\", inplace=True)\n\nprint(list(df.columns))\n\n\n\n\n\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:9: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n/tmp/ipykernel_5367/2634717440.py:12: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n\n\n['LAST_UPDATED_DATE', 'POSTED', 'EXPIRED', 'DURATION', 'SOURCE_TYPES', 'SOURCES', 'TITLE_RAW', 'BODY', 'MODELED_EXPIRED', 'MODELED_DURATION', 'COMPANY', 'COMPANY_NAME', 'COMPANY_RAW', 'COMPANY_IS_STAFFING', 'EDUCATION_LEVELS', 'EDUCATION_LEVELS_NAME', 'MIN_EDULEVELS', 'MIN_EDULEVELS_NAME', 'EMPLOYMENT_TYPE', 'EMPLOYMENT_TYPE_NAME', 'MIN_YEARS_EXPERIENCE', 'IS_INTERNSHIP', 'REMOTE_TYPE', 'REMOTE_TYPE_NAME', 'LOCATION', 'CITY', 'CITY_NAME', 'COUNTY', 'COUNTY_NAME', 'MSA', 'MSA_NAME', 'STATE', 'STATE_NAME', 'COUNTY_OUTGOING', 'COUNTY_NAME_OUTGOING', 'COUNTY_INCOMING', 'COUNTY_NAME_INCOMING', 'MSA_OUTGOING', 'MSA_NAME_OUTGOING', 'MSA_INCOMING', 'MSA_NAME_INCOMING', 'NAICS2', 'NAICS2_NAME', 'NAICS3', 'NAICS3_NAME', 'NAICS4', 'NAICS4_NAME', 'NAICS5', 'NAICS5_NAME', 'NAICS6', 'NAICS6_NAME', 'TITLE', 'TITLE_NAME', 'TITLE_CLEAN', 'SKILLS', 'SKILLS_NAME', 'SPECIALIZED_SKILLS', 'SPECIALIZED_SKILLS_NAME', 'CERTIFICATIONS', 'CERTIFICATIONS_NAME', 'COMMON_SKILLS', 'COMMON_SKILLS_NAME', 'SOFTWARE_SKILLS', 'SOFTWARE_SKILLS_NAME', 'ONET', 'ONET_NAME', 'ONET_2019', 'ONET_2019_NAME', 'CIP6', 'CIP6_NAME', 'CIP4', 'CIP4_NAME', 'CIP2', 'CIP2_NAME', 'SOC_2021_2', 'SOC_2021_2_NAME', 'SOC_2021_3', 'SOC_2021_3_NAME', 'SOC_2021_4', 'SOC_2021_4_NAME', 'SOC_2021_5', 'SOC_2021_5_NAME', 'LOT_CAREER_AREA', 'LOT_CAREER_AREA_NAME', 'LOT_OCCUPATION', 'LOT_OCCUPATION_NAME', 'LOT_SPECIALIZED_OCCUPATION', 'LOT_SPECIALIZED_OCCUPATION_NAME', 'LOT_OCCUPATION_GROUP', 'LOT_OCCUPATION_GROUP_NAME', 'LOT_V6_SPECIALIZED_OCCUPATION', 'LOT_V6_SPECIALIZED_OCCUPATION_NAME', 'LOT_V6_OCCUPATION', 'LOT_V6_OCCUPATION_NAME', 'LOT_V6_OCCUPATION_GROUP', 'LOT_V6_OCCUPATION_GROUP_NAME', 'LOT_V6_CAREER_AREA', 'LOT_V6_CAREER_AREA_NAME', 'SOC_2_NAME', 'SOC_3_NAME', 'SOC_4', 'SOC_4_NAME', 'SOC_5_NAME', 'NAICS_2022_2_NAME', 'NAICS_2022_3_NAME', 'NAICS_2022_4_NAME', 'NAICS_2022_5_NAME', 'NAICS_2022_6', 'NAICS_2022_6_NAME']\n\n\nIn order to analyze the employment market trends more intuitively, we use the following visualization methods: The bar chart can show the number of recruitments in each industry, and directly show some industries with the highest recruitment demand.The box plot can show the salary distribution of each industry. This chart can show the median and extreme values ​​of salaries in different industries. The pie chart shows the proportion of remote or offline work. The line chart can show the trend more clearly and is used to observe whether AI-related positions are actually growing faster.\n\ntop_20_industries = df[\"NAICS2_NAME\"].value_counts().nlargest(20)\n\nplt.figure(figsize=(10, 6))\ntop_20_industries.plot(kind=\"bar\", color=\"steelblue\")\nplt.title(\"Job Postings by Industry\")\nplt.xlabel(\"Industry\")\nplt.ylabel(\"Job Postings\")\nplt.xticks(rotation=45, ha=\"right\")\nplt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\n\nplt.show()\n\n\n\n\n\n\n\n\nBar Chart: Job Postings by Industry Key Findings 1.- The chart shows that “Professional, Scientific, and Technical Services” has a much higher number of job postings than any other industry, more than double the number of the second industry. This indicates that specialized skills such as technology, engineering, data science, and consulting are in high demand. 2. Higher demand for hiring in Finance and Insurance and Manufacturing indicates a growth in demand for skilled professionals in these sectors. 3. Retail, Arts, Accommodation and Food Services have significantly lower hiring demand, reflecting the fact that these industries may be affected by automation, the economic climate and the development of AI. 4. Higher hiring in Unclassified Industries, which may include emerging industries or cross-cutting positions such as AI R&D and freelancing, suggests that the labor market is undergoing structural change. Key insights Job seekers can focus more on high-demand industries, especially in technology, finance and manufacturing. AI and data-related careers are in high demand, and upgrading skills such as Python, SQL, and machine learning will increase competitiveness. Candidates in low-demand sectors can transition into cross-industry roles, such as tech-related roles or upgrading cross-industry skills.\n\ntop_20_industries = df[\"NAICS_2022_6_NAME\"].value_counts().nlargest(20)\ndf_filtered = df[df[\"NAICS_2022_6_NAME\"].isin(top_20_industries.index)]\n\nsalary_columns = [\"Salary\", \"WAGE\", \"COMPENSATION\", \"HOURLY_RATE\"]\nsalary_col = next((col for col in df.columns if col in salary_columns), None)\n\n\nplt.figure(figsize=(12, 6))\nsns.boxplot(data=df_filtered, x=\"NAICS_2022_6_NAME\", y=salary_col)\n\nplt.title(\"Salary Distribution by Industry\", fontsize=14)\nplt.xticks(rotation=45, ha=\"right\")\nplt.xlabel(\"Industry\")\nplt.ylabel(\"Salary\")\n\nplt.show()\n\n\n\n\n\n\n\n\nBoxplot: Salary Distribution by Industry Key Findings 1. The box plot shows a wide distribution of median salaries by industry, which suggests that there may be large salary gaps between industries. 2. Certain industries have narrower salary distributions, such as General Medical and Surgical Hospitals and Insurance Agencies and Brokerages, suggesting that salaries in these industries are relatively stable and may have standardized salary structures. 3. The impact of outliers touching the far ends of the box plot suggests that extreme high salaries in certain industries (e.g., executive positions, hot tech jobs) can significantly drive up average salaries. Key insights For job seekers looking for higher salaries, focus on industries with wider salary distributions and higher upper quartiles. For job seekers looking for a stable salary, healthcare and education industries offer less salary variability and are ideal for long-term career planning. Industry choice is critical to salary growth, and job seekers can choose a career path that suits them based on salary distribution and their own skills.\n\ndf[\"REMOTE_TYPE_NAME\"] = df[\"REMOTE_TYPE_NAME\"].replace({None: \"On-Site\", \"[None]\": \"On-Site\"})\n\nremote_counts = df[\"REMOTE_TYPE_NAME\"].value_counts()\n\nplt.figure(figsize=(8, 6))\nplt.pie(remote_counts, labels=remote_counts.index, autopct='%1.1f%%', startangle=140, colors=['#636EFA', '#EF553B', '#00CC96', '#AB63FA'])\n\nplt.title(\"Remote vs. On-Site Jobs\", fontsize=14)\n\nplt.show()\n\n\n\n\n\n\n\n\nPie Chart: Remote vs. On-Site Jobs Key Findings 1. 78.3% of jobs are on-site, indicating that despite the growth of remote jobs, most companies still prefer employees to work in the office. 2. Remote jobs make up 17% of the workforce, indicating that the trend toward telecommuting continues to grow. 3. The growth of the Hybrid Remote model, with 3.11% of positions being Hybrid Remote, suggests that some companies are adopting a part remote, part on-site work model to increase employee flexibility and productivity. 4. Not Remote may mean that some positions are explicitly not telecommuting. key insights Hybrid office models are growing, and job seekers can choose flexible work arrangements, such as looking for partially remote positions, to improve life-work balance. On-site work is still the mainstream, and job seekers need to consider industry characteristics and their own needs.\n\nprint(\"Data Cleaning and EDA completed successfully\")\ndf.head()\n\nData Cleaning and EDA completed successfully\n\n\n\n\n\n\n\n\n\n\nLAST_UPDATED_DATE\nPOSTED\nEXPIRED\nDURATION\nSOURCE_TYPES\nSOURCES\nTITLE_RAW\nBODY\nMODELED_EXPIRED\nMODELED_DURATION\n...\nSOC_3_NAME\nSOC_4\nSOC_4_NAME\nSOC_5_NAME\nNAICS_2022_2_NAME\nNAICS_2022_3_NAME\nNAICS_2022_4_NAME\nNAICS_2022_5_NAME\nNAICS_2022_6\nNAICS_2022_6_NAME\n\n\n\n\n0\n2024-09-06\n2024-06-02\n2024-06-08\n6.0\n[\\n \"Company\"\\n]\n[\\n \"brassring.com\"\\n]\nEnterprise Analyst (II-III)\n31-May-2024\\n\\nEnterprise Analyst (II-III)\\n\\n...\n2024-06-08\n6.0\n...\nMathematical Science Occupations\n15-2050\nData Scientists\nData Scientists\nRetail Trade\nMotor Vehicle and Parts Dealers\nAutomotive Parts, Accessories, and Tire Retailers\nAutomotive Parts and Accessories Retailers\n441330\nAutomotive Parts and Accessories Retailers\n\n\n1\n2024-08-02\n2024-06-02\n2024-08-01\n18.0\n[\\n \"Job Board\"\\n]\n[\\n \"maine.gov\"\\n]\nOracle Consultant - Reports (3592)\nOracle Consultant - Reports (3592)\\n\\nat SMX i...\n2024-08-01\n16.0\n...\nMathematical Science Occupations\n15-2050\nData Scientists\nData Scientists\nAdministrative and Support and Waste Managemen...\nAdministrative and Support Services\nEmployment Services\nTemporary Help Services\n561320\nTemporary Help Services\n\n\n2\n2024-09-06\n2024-06-02\n2024-07-07\n35.0\n[\\n \"Job Board\"\\n]\n[\\n \"dejobs.org\"\\n]\nData Analyst\nTaking care of people is at the heart of every...\n2024-06-10\n8.0\n...\nMathematical Science Occupations\n15-2050\nData Scientists\nData Scientists\nFinance and Insurance\nInsurance Carriers and Related Activities\nAgencies, Brokerages, and Other Insurance Rela...\nOther Insurance Related Activities\n524291\nClaims Adjusting\n\n\n3\n2024-09-06\n2024-06-02\n2024-07-20\n48.0\n[\\n \"Job Board\"\\n]\n[\\n \"disabledperson.com\",\\n \"dejobs.org\"\\n]\nSr. Lead Data Mgmt. Analyst - SAS Product Owner\nAbout this role:\\n\\nWells Fargo is looking for...\n2024-06-12\n10.0\n...\nMathematical Science Occupations\n15-2050\nData Scientists\nData Scientists\nFinance and Insurance\nCredit Intermediation and Related Activities\nDepository Credit Intermediation\nCommercial Banking\n522110\nCommercial Banking\n\n\n4\n2024-06-19\n2024-06-02\n2024-06-17\n15.0\n[\\n \"FreeJobBoard\"\\n]\n[\\n \"craigslist.org\"\\n]\nComisiones de $1000 - $3000 por semana... Comi...\nComisiones de $1000 - $3000 por semana... Comi...\n2024-06-17\n15.0\n...\nMathematical Science Occupations\n15-2050\nData Scientists\nData Scientists\nUnclassified Industry\nUnclassified Industry\nUnclassified Industry\nUnclassified Industry\n999999\nUnclassified Industry\n\n\n\n\n5 rows × 109 columns"
  },
  {
    "objectID": "data_cleaning.html",
    "href": "data_cleaning.html",
    "title": "Job Market Analysis 2024",
    "section": "",
    "text": "!pip install pandas matplotlib seaborn\n\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = pd.read_csv(\"lightcast_job_postings.csv\")\ndf.info()\nprint(df.head())\n\n#replace the missing Values\nmissing_values = df.isnull().sum()\nmissing_percentage = (missing_values / len(df)) * 100\nmissing_data = pd.DataFrame({\"Missing Values\": missing_values, \"Percentage\": missing_percentage})\nmissing_data = missing_data[missing_data[\"Missing Values\"] &gt; 0]\nmissing_data = missing_data.sort_values(by=\"Percentage\", ascending=False)\n\nsalary_median = df[\"SALARY\"].median()\ndf[\"SALARY\"].fillna(salary_median, inplace=True)\n\n#convert time columns\ndate_columns = [\"LAST_UPDATED_DATE\", \"LAST_UPDATED_TIMESTAMP\", \"POSTED\", \"EXPIRED\"]\nfor col in date_columns:\n    if col in df.columns:  \n        df[col] = pd.to_datetime(df[col], errors=\"coerce\", utc=True) \n\n#Extract Data\nselected_columns = df[['TITLE', 'SALARY', 'SALARY_FROM', 'SALARY_TO', 'SKILLS']]\nprint(selected_columns.head())\nselected_columns.to_csv('Extracted_data.csv', index=False)\n\nRequirement already satisfied: pandas in ./venv/lib/python3.12/site-packages (2.2.3)\nRequirement already satisfied: matplotlib in ./venv/lib/python3.12/site-packages (3.10.1)\nRequirement already satisfied: seaborn in ./venv/lib/python3.12/site-packages (0.13.2)\nRequirement already satisfied: numpy&gt;=1.26.0 in ./venv/lib/python3.12/site-packages (from pandas) (2.2.5)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in ./venv/lib/python3.12/site-packages (from pandas) (2.9.0.post0)\nRequirement already satisfied: pytz&gt;=2020.1 in ./venv/lib/python3.12/site-packages (from pandas) (2025.2)\nRequirement already satisfied: tzdata&gt;=2022.7 in ./venv/lib/python3.12/site-packages (from pandas) (2025.2)\nRequirement already satisfied: contourpy&gt;=1.0.1 in ./venv/lib/python3.12/site-packages (from matplotlib) (1.3.2)\nRequirement already satisfied: cycler&gt;=0.10 in ./venv/lib/python3.12/site-packages (from matplotlib) (0.12.1)\nRequirement already satisfied: fonttools&gt;=4.22.0 in ./venv/lib/python3.12/site-packages (from matplotlib) (4.57.0)\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in ./venv/lib/python3.12/site-packages (from matplotlib) (1.4.8)\nRequirement already satisfied: packaging&gt;=20.0 in ./venv/lib/python3.12/site-packages (from matplotlib) (24.2)\nRequirement already satisfied: pillow&gt;=8 in ./venv/lib/python3.12/site-packages (from matplotlib) (11.2.1)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in ./venv/lib/python3.12/site-packages (from matplotlib) (3.2.3)\nRequirement already satisfied: six&gt;=1.5 in ./venv/lib/python3.12/site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas) (1.17.0)\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 72476 entries, 0 to 72475\nColumns: 131 entries, ID to NAICS_2022_6_NAME\ndtypes: bool(2), float64(11), int64(27), object(91)\nmemory usage: 71.5+ MB\n                                         ID LAST_UPDATED_DATE  \\\n0  1f57d95acf4dc67ed2819eb12f049f6a5c11782c        2024-09-06   \n1  0cb072af26757b6c4ea9464472a50a443af681ac        2024-08-02   \n2  85318b12b3331fa490d32ad014379df01855c557        2024-09-06   \n3  1b5c3941e54a1889ef4f8ae55b401a550708a310        2024-09-06   \n4  cb5ca25f02bdf25c13edfede7931508bfd9e858f        2024-06-19   \n\n      LAST_UPDATED_TIMESTAMP  DUPLICATES      POSTED     EXPIRED  DURATION  \\\n0  2024-09-06 20:32:57.352 Z           0  2024-06-02  2024-06-08       6.0   \n1  2024-08-02 17:08:58.838 Z           0  2024-06-02  2024-08-01       NaN   \n2  2024-09-06 20:32:57.352 Z           1  2024-06-02  2024-07-07      35.0   \n3  2024-09-06 20:32:57.352 Z           1  2024-06-02  2024-07-20      48.0   \n4  2024-06-19 07:00:00.000 Z           0  2024-06-02  2024-06-17      15.0   \n\n             SOURCE_TYPES                                        SOURCES  \\\n0       [\\n  \"Company\"\\n]                        [\\n  \"brassring.com\"\\n]   \n1     [\\n  \"Job Board\"\\n]                            [\\n  \"maine.gov\"\\n]   \n2     [\\n  \"Job Board\"\\n]                           [\\n  \"dejobs.org\"\\n]   \n3     [\\n  \"Job Board\"\\n]  [\\n  \"disabledperson.com\",\\n  \"dejobs.org\"\\n]   \n4  [\\n  \"FreeJobBoard\"\\n]                       [\\n  \"craigslist.org\"\\n]   \n\n                                                 URL  ... NAICS_2022_2  \\\n0  [\\n  \"https://sjobs.brassring.com/TGnewUI/Sear...  ...           44   \n1   [\\n  \"https://joblink.maine.gov/jobs/1085740\"\\n]  ...           56   \n2  [\\n  \"https://dejobs.org/dallas-tx/data-analys...  ...           52   \n3  [\\n  \"https://www.disabledperson.com/jobs/5948...  ...           52   \n4  [\\n  \"https://modesto.craigslist.org/sls/77475...  ...           99   \n\n                                   NAICS_2022_2_NAME NAICS_2022_3  \\\n0                                       Retail Trade          441   \n1  Administrative and Support and Waste Managemen...          561   \n2                              Finance and Insurance          524   \n3                              Finance and Insurance          522   \n4                              Unclassified Industry          999   \n\n                              NAICS_2022_3_NAME NAICS_2022_4  \\\n0               Motor Vehicle and Parts Dealers         4413   \n1           Administrative and Support Services         5613   \n2     Insurance Carriers and Related Activities         5242   \n3  Credit Intermediation and Related Activities         5221   \n4                         Unclassified Industry         9999   \n\n                                   NAICS_2022_4_NAME  NAICS_2022_5  \\\n0  Automotive Parts, Accessories, and Tire Retailers         44133   \n1                                Employment Services         56132   \n2  Agencies, Brokerages, and Other Insurance Rela...         52429   \n3                   Depository Credit Intermediation         52211   \n4                              Unclassified Industry         99999   \n\n                            NAICS_2022_5_NAME NAICS_2022_6  \\\n0  Automotive Parts and Accessories Retailers       441330   \n1                     Temporary Help Services       561320   \n2          Other Insurance Related Activities       524291   \n3                          Commercial Banking       522110   \n4                       Unclassified Industry       999999   \n\n                            NAICS_2022_6_NAME  \n0  Automotive Parts and Accessories Retailers  \n1                     Temporary Help Services  \n2                            Claims Adjusting  \n3                          Commercial Banking  \n4                       Unclassified Industry  \n\n[5 rows x 131 columns]\n                TITLE    SALARY  SALARY_FROM  SALARY_TO  \\\n0  ET29C073C03D1F86B4  116348.5          NaN        NaN   \n1  ET21DDA63780A7DC09  116348.5          NaN        NaN   \n2  ET3037E0C947A02404  116348.5          NaN        NaN   \n3  ET2114E0404BA30075  116348.5          NaN        NaN   \n4  ET0000000000000000   92500.0      35000.0   150000.0   \n\n                                              SKILLS  \n0  [\\n  \"KS126DB6T061MHD7RTGQ\",\\n  \"KS126706DPFD3...  \n1  [\\n  \"KS122626T550SLQ7QZ1C\",\\n  \"KS123YJ6KVWC9...  \n2  [\\n  \"KS1218W78FGVPVP2KXPX\",\\n  \"ESF3939CE1F80...  \n3  [\\n  \"KS123QX62QYTC4JF38H8\",\\n  \"KS7G6NP6R6L1H...  \n4                                                 []  \n\n\n/tmp/ipykernel_6182/1001905087.py:19: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object."
  },
  {
    "objectID": "final_analytics.html",
    "href": "final_analytics.html",
    "title": "Job Market Analysis 2024",
    "section": "",
    "text": "The goal of this regression model is to predict job salary based on structured features and analyze how different factors influence salary levels.\nThe selected features include: - Job title (TITLE_RAW) - Industry (NAICS) - Location (STATE_NAME) - Number of skills required (num_skills) - Whether the job is remote (REMOTE_TYPE_NAME) - Whether the job is AI-related (IS_AI_ROLE)\n\n\n\n\nAI-related jobs consistently offer higher salaries compared to non-AI roles.\nRemote positions and roles based in tech-centric states (e.g., California, Washington) are associated with higher salary ranges.\nThe number of required skills correlates positively with salary, but the effect diminishes after a certain threshold (diminishing returns).\n\n\n\n\n\nPrioritize AI-related or hybrid roles that incorporate AI elements.\nInvest in developing in-demand skills such as machine learning, cloud computing (e.g., AWS).\nConsider targeting remote jobs or positions located in high-paying regions.\n\n\n\n\n\n\n\n\nThe goal of this classification model is to predict whether a job is AI-related based on categorical and numeric features.\nKey features include: - Keywords in job title - NAICS industry code - Number of skills required - Remote work indicator - Location of job posting\n\n\n\n\nTwo classification models were built; the second model included additional engineered features.\nOverall accuracy improved to 69%, with recall for AI roles increasing from 0.39 to 0.45.\nThe F1 score remains moderate (0.52), suggesting that class imbalance is still a challenge.\n\n\n\n\n\nUse AI-relevant keywords in job applications and resumes to align with AI classifications.\nEmphasize technical skills, especially machine learning and cloud technologies.\nUnderstand which job titles are commonly associated with AI to refine search strategies.\n\n\n\n\n\n\n\nAI-related roles consistently signal higher compensation across models.\nRemote jobs are advantageous both in terms of flexibility and salary.\nSkill count is a strong predictor but shows a nonlinear relationship with salary.\n\n\n\n\n\n\nClass imbalance affected classification model performance.\nFuture work could integrate NLP-based features (e.g., word embeddings, job description parsing).\nModeling interaction effects and analyzing salary ranges (SALARY_FROM to SALARY_TO) could offer deeper insights.\n\n\n\n\n\nThis project provided the opportunity to explore job market trends using real-world labor market data and multiple machine learning models.\nWe identified strong predictors of salary and AI affiliation and translated these insights into actionable advice for job seekers."
  },
  {
    "objectID": "final_analytics.html#final-analytics-and-insights",
    "href": "final_analytics.html#final-analytics-and-insights",
    "title": "Job Market Analysis 2024",
    "section": "",
    "text": "The goal of this regression model is to predict job salary based on structured features and analyze how different factors influence salary levels.\nThe selected features include: - Job title (TITLE_RAW) - Industry (NAICS) - Location (STATE_NAME) - Number of skills required (num_skills) - Whether the job is remote (REMOTE_TYPE_NAME) - Whether the job is AI-related (IS_AI_ROLE)\n\n\n\n\nAI-related jobs consistently offer higher salaries compared to non-AI roles.\nRemote positions and roles based in tech-centric states (e.g., California, Washington) are associated with higher salary ranges.\nThe number of required skills correlates positively with salary, but the effect diminishes after a certain threshold (diminishing returns).\n\n\n\n\n\nPrioritize AI-related or hybrid roles that incorporate AI elements.\nInvest in developing in-demand skills such as machine learning, cloud computing (e.g., AWS).\nConsider targeting remote jobs or positions located in high-paying regions.\n\n\n\n\n\n\n\n\nThe goal of this classification model is to predict whether a job is AI-related based on categorical and numeric features.\nKey features include: - Keywords in job title - NAICS industry code - Number of skills required - Remote work indicator - Location of job posting\n\n\n\n\nTwo classification models were built; the second model included additional engineered features.\nOverall accuracy improved to 69%, with recall for AI roles increasing from 0.39 to 0.45.\nThe F1 score remains moderate (0.52), suggesting that class imbalance is still a challenge.\n\n\n\n\n\nUse AI-relevant keywords in job applications and resumes to align with AI classifications.\nEmphasize technical skills, especially machine learning and cloud technologies.\nUnderstand which job titles are commonly associated with AI to refine search strategies.\n\n\n\n\n\n\n\nAI-related roles consistently signal higher compensation across models.\nRemote jobs are advantageous both in terms of flexibility and salary.\nSkill count is a strong predictor but shows a nonlinear relationship with salary.\n\n\n\n\n\n\nClass imbalance affected classification model performance.\nFuture work could integrate NLP-based features (e.g., word embeddings, job description parsing).\nModeling interaction effects and analyzing salary ranges (SALARY_FROM to SALARY_TO) could offer deeper insights.\n\n\n\n\n\nThis project provided the opportunity to explore job market trends using real-world labor market data and multiple machine learning models.\nWe identified strong predictors of salary and AI affiliation and translated these insights into actionable advice for job seekers."
  },
  {
    "objectID": "bonus_section.html",
    "href": "bonus_section.html",
    "title": "Job Market Analysis 2024",
    "section": "",
    "text": "This section was completed to fulfill the optional bonus (+10 points) for extended analysis using natural language processing.\nWe explored whether the textual content of job descriptions (BODY) could be used to predict whether a job is AI-related. This involved both classification modeling using TF-IDF features and visual inspection via WordClouds.\n\n\n\nWe used TfidfVectorizer to convert unstructured job description text into structured numerical features, selecting the top 1,000 tokens. A Logistic Regression classifier was trained to predict AI-related roles.\n\n\n\n\nTo supplement the classification results, we generated WordClouds that visualize the most frequently appearing words in AI and non-AI job descriptions.\n\n\n\n\n\nAI Job WordCloud\n\n\n\n\n\n\n\n\nNon-AI Job WordCloud\n\n\nInsights from WordClouds: - AI job descriptions prominently include terms like \"data analyst\", \"data governance\", \"experience with data\", and \"machine learning\". - Non-AI jobs also emphasize \"ability to\", \"collaborate\", and \"communication\", but with less technical specificity. - Both categories include standard HR language, such as \"equal opportunity\", \"bachelor degree\", and \"job description\".\nThese patterns reinforce the idea that AI roles emphasize technical proficiency, while non-AI roles lean toward soft skills and operational language.\n\n\n\n\n\n\nJob description text alone can provide predictive signals for AI-related role detection.\nNLP-based classification adds interpretability and complements structured-data models.\nJob seekers targeting AI careers should consider using technical terms in resumes that align with frequently appearing phrases in AI postings.\n\nThis bonus section demonstrates the value of unstructured data in employment analytics and enriches our broader findings on AI job trends."
  },
  {
    "objectID": "bonus_section.html#bonus-section-nlp-based-ai-job-classification",
    "href": "bonus_section.html#bonus-section-nlp-based-ai-job-classification",
    "title": "Job Market Analysis 2024",
    "section": "",
    "text": "This section was completed to fulfill the optional bonus (+10 points) for extended analysis using natural language processing.\nWe explored whether the textual content of job descriptions (BODY) could be used to predict whether a job is AI-related. This involved both classification modeling using TF-IDF features and visual inspection via WordClouds.\n\n\n\nWe used TfidfVectorizer to convert unstructured job description text into structured numerical features, selecting the top 1,000 tokens. A Logistic Regression classifier was trained to predict AI-related roles.\n\n\n\n\nTo supplement the classification results, we generated WordClouds that visualize the most frequently appearing words in AI and non-AI job descriptions.\n\n\n\n\n\nAI Job WordCloud\n\n\n\n\n\n\n\n\nNon-AI Job WordCloud\n\n\nInsights from WordClouds: - AI job descriptions prominently include terms like \"data analyst\", \"data governance\", \"experience with data\", and \"machine learning\". - Non-AI jobs also emphasize \"ability to\", \"collaborate\", and \"communication\", but with less technical specificity. - Both categories include standard HR language, such as \"equal opportunity\", \"bachelor degree\", and \"job description\".\nThese patterns reinforce the idea that AI roles emphasize technical proficiency, while non-AI roles lean toward soft skills and operational language.\n\n\n\n\n\n\nJob description text alone can provide predictive signals for AI-related role detection.\nNLP-based classification adds interpretability and complements structured-data models.\nJob seekers targeting AI careers should consider using technical terms in resumes that align with frequently appearing phrases in AI postings.\n\nThis bonus section demonstrates the value of unstructured data in employment analytics and enriches our broader findings on AI job trends."
  },
  {
    "objectID": "nlp_methods.html",
    "href": "nlp_methods.html",
    "title": "Job Market Analysis 2024",
    "section": "",
    "text": "import pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\n\ndf = pd.read_csv(\"lightcast_job_postings.csv\")\ndf = df[df['BODY'].notnull()]  \n\nX_text = df['BODY']\ny = df['LOT_SPECIALIZED_OCCUPATION_NAME']  \n\ntfidf = TfidfVectorizer(stop_words='english', max_features=1000)\nX_tfidf = tfidf.fit_transform(X_text)\n\nX_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.3, random_state=42)\n\nclf = LogisticRegression(max_iter=200)\nclf.fit(X_train, y_train)\n\ny_pred = clf.predict(X_test)\n\nprint(\"Classification Report:\\n\", classification_report(y_test, y_pred))\nprint(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n\nClassification Report:\n                                   precision    recall  f1-score   support\n\n      Business Analyst (General)       0.74      0.62      0.67      1355\n   Business Intelligence Analyst       0.86      0.71      0.77      1116\n                    Data Analyst       0.85      0.95      0.90      8326\n            Data Quality Analyst       0.76      0.56      0.64       326\n            Enterprise Architect       0.97      0.94      0.95      2458\n          Financial Data Analyst       0.79      0.53      0.63       333\nGeneral ERP Analyst / Consultant       0.84      0.83      0.84      3014\n              Healthcare Analyst       0.88      0.51      0.64        75\n               Marketing Analyst       0.78      0.13      0.23        53\n     Oracle Consultant / Analyst       0.94      0.92      0.93      2406\n             SAP Analyst / Admin       0.79      0.76      0.77      2281\n\n                        accuracy                           0.86     21743\n                       macro avg       0.84      0.68      0.73     21743\n                    weighted avg       0.86      0.86      0.86     21743\n\nConfusion Matrix:\n [[ 838   15  357    7   11    8   38    0    2   13   66]\n [  26  787  272    3    2    1    3    0    0    5   17]\n [ 101   89 7921   35   25   19   39    2    0   27   68]\n [   8    0  130  182    0    2    0    0    0    1    3]\n [  14    1   62    0 2321    4   38    0    0   12    6]\n [  14    1  120    1    0  176    1    0    0    1   19]\n [  44   13  156    3   27    0 2503    3    0   50  215]\n [  13    1   19    0    0    0    3   38    0    1    0]\n [  14    1   18    0    0    0    4    0    7    0    9]\n [  13    5   77    1   10    3   42    0    0 2204   51]\n [  43    4  169    7    9   10  292    0    0   21 1726]]\n\n\n: \n\n\n\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\nai_keywords = ['ai', 'artificial', 'machine learning', 'deep learning', \n               'data scientist', 'nlp', 'computer vision', 'ml', 'llm', \n               'analyst', 'engineer', 'developer']\n\n\ndef is_ai_job(text):\n    if pd.isnull(text):\n        return 0\n    return int(any(kw.lower() in text.lower() for kw in ai_keywords))\n\ndf['IS_AI_ROLE'] = df['LOT_SPECIALIZED_OCCUPATION_NAME'].apply(is_ai_job)\n\nai_text = ' '.join(df[df['IS_AI_ROLE'] == 1]['BODY'].dropna())\nnonai_text = ' '.join(df[df['IS_AI_ROLE'] == 0]['BODY'].dropna())\n\nai_wc = WordCloud(width=800, height=400, background_color='white', stopwords='english').generate(ai_text)\nnonai_wc = WordCloud(width=800, height=400, background_color='white', stopwords='english').generate(nonai_text)\n\nplt.figure(figsize=(10, 5))\nplt.imshow(ai_wc, interpolation='bilinear')\nplt.axis('off')\nplt.title('AI Job Word Cloud')\nplt.show()\n\nplt.figure(figsize=(10, 5))\nplt.imshow(nonai_wc, interpolation='bilinear')\nplt.axis('off')\nplt.title('Non-AI Job WordCloud')\nplt.show()"
  }
]